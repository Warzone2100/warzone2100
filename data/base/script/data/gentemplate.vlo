//Generic VLO file template for start/expand levels

//Cam2a.vlo

script "GenExp.slo"
run
{
/* Next level stuff */
NextLev		LEVEL		"SUB_2_1S"	//points to next level in GameDesc.lev
lastLev		BOOL		TRUE		//don't try to load next one

/* Define Players/Enemies */
numEnemies	int		2		//MAX 2. Must define same as number of enemy players given next
enemy[0]	int		1		//player number, eg 1 for New Paradigm, 2 for Collective, 3 for Nexus, 7 for scavengers
enemy[1]	int		7		//scavenger player number
alliancePlayer	int	0		//ally player with this player number, currently self.
allianceEnemy[0]	int	7		//ally enemy with this player number, currently scavenger
allianceEnemy[1]	int	0		//ally scavengers with the player (useful for civilians)
allianceFlag	BOOL		FALSE		//TRUE if want enemies to use each others targets, otherwise mark FALSE

/* Starting Enemy Power */
power[0]	int		300		//starting power for enemy[0]	(New Paradigm in this case)
power[1]	int		1000		//starting power for enemy[1]	(Scavengers in this case)

/* Structure Limits */
//Leave these as are, for Player only!
numStrucStats	int	5			//MAX 5. Must be same as number of limits given next
strucStat[0]	STRUCTURESTAT	"A0PowerGenerator"
strucLimit[0]	int		1
strucStat[1]	STRUCTURESTAT	"A0ResourceExtractor"
strucLimit[1]	int		200
strucStat[2]	STRUCTURESTAT	"A0ResearchFacility"
strucLimit[2]	int		5
strucStat[3]	STRUCTURESTAT	"A0LightFactory"
strucLimit[3]	int		5
strucStat[4]	STRUCTURESTAT	"A0CommandCentre"
strucLimit[4]	int		1

/* Initialisation */
centreX		int		11200		//starting view centre (in world units)
centreY		int		12864		//needs to be set correctly
scrollX1	int		64	//scroll limits (in tile units)
scrollY1	int		64	//needs to be set correctly
scrollX2	int		128
scrollY2	int		128
zoomLevel	int		0	//starting radar: 0=zoomed out, 2=zoomed in

numLZ		int		2	//MAX 8. Number of Landing zones/areas can't build on (LZX[0], LZY[0] = player's LZ)
LZX[0]		int		0	//coords of player's LZ in tile units
LZY[0]		int		0	
LZX[1]		int		0	//coords of other LZ's
LZY[1]		int		0

reinfOff		BOOL		TRUE	//don't set reinforcements (done in another script)
ReinforceTime	INT		-1	//-1 for no reinforcements, otherwise time in 10ths of seconds (only for Submaps)

/* Transport exit and entry */
//need setting for submaps only
transX[0]	int		1	//player transport entry coord in tile units
transY[0]	int		1
transX[1]	int		1	//player transport exit coord in tile units
transY[1]	int		1

//for each enemy that requires enemy transports landing (handled as a phantom factory)
entryX[0]	int		0	//define transport entry exit for each enemy!
entryY[0]	int		0	//unnecessary if no enemy transports (defaults 0)
exitX	[0]	int		0	//leave as 0 if don't want a transport adding for this enemy
exitY	[0]	int		0

/* starting technology for enemy */
//NOTE: need to set first number in array for enemy player
//second number needs to correspond to numTechs[enemy]
//MAX 2 enemies, 10 technologies
numTechs[0]	int		2		//number of technologies to follow for enemy[0]
startTech[0][0]	RESEARCHSTAT	"R-Wpn-MG-Damage03"
startTech[0][1]	RESEARCHSTAT	"R-Wpn-Rocket-Damage02"

numTechs[1]	int		3		//number of technologies to follow for enemy[1]
startTech[1][0]	RESEARCHSTAT	"R-Vehicle-Body01"
startTech[1][1]	RESEARCHSTAT	"R-Sys-Spade1Mk1"
startTech[1][2]	RESEARCHSTAT	"R-Vehicle-Prop-Wheels"


/* Briefings */
//Pete Johnson handles these so please leave setup as he has them!
numBriefs	int		1	//MAX 2. Needs to be same as the number of briefings given next
brief[0]	INTMESSAGE	"MB2A_MSG"
briefVal[0]	int		2	//0 remove after playing, 1 keep, 2 don't play immediately

/* Objectives */
//any blips placed at the start of a mission are done here
numObjectives	int		1			//MAX 3. Needs to be the same as the number of objective blips given next
objective[0]	INTMESSAGE	"DELETE_ME"		//in prox<name>.txt files (need updating) 
objectiveX[0]	int		6848			//world coords where player's droids need to get close to to remove the blip
objectiveY[0]	int		7104

/* Victory Conditions */
//NOTE: always assumes victory condition of: number of artifacts collected = victoryArt
numVictory	int		4	//number of victory conditions to be met (not including artifacts)
					//DOESN'T need to be same as number given next (these are set TRUE/FALSE)
					//if victory condition required. Can have 2 set to TRUE and numVictory = 1
					//This will then let player win if EITHER condition is true!
					//Use numVictory of 0 if just want player to get artifacts

//these now done as integers NOT bools!! Use -1 for False, # for True (often an index to check!)
//for this reason must specify ALL victory[]!
victory[0]	int		1	//all enemy vehicles and structures need to be killed
victory[1]	int		10	//all players vehicles at REGION index # (eg LZ REGION)
victory[2]	int		1	//number of objectives to get to (uses objective[0] to objective[#])
victory[3]	int		2	//number of bases to destroy (uses base[0] to base[#])

//use this to communicate extra victory conditions in another script run beside the generic one
linkVictory	BOOL		TRUE

/* Failure Conditions */
//Extra conditions above ALL player units and structures dead, or TIME LIMIT expired
//numFail	int		0	//number required to be met (usually one if used!)
//only one of these has to be met
//Use -1 for False, # for True (often an index to check!)

fail	[0]	int		0	//DROID # index all got to REGION (no longer a group #)
fail	[1]	int		10	//REGION index for above (these count as one condition!)
failSnd	SOUND		"pcv632.ogg"	//"Enemy Escaping" played for failure

//use this to communicate extra fail conditions in another script run beside the generic one
linkFail	BOOL		TRUE
//use this to prevent generic script failing when time is up!
noTimeLimit	BOOL		TRUE	//don't use time limit as a fail in GenExp

/* Artifacts */
victoryArt	int		0	//number of artifacts required for victory (must be <= numArt)
numArt		int		0	//MAX 6. Number of artifacts in total (even if not in game, but added as extra research!)

//new improved way of doing artifacts
//artType: 0 = artifact starts on map, 1 = get from STRUCTURE, 2 = get from FEATURE, 3 = get from DROID, 4 = at end of level
//artVal: index to relevant type, ie FEATURE(crate), FEATURE, STRUCTURE, DROID
//artX, artY: artifact coords (this is updated for DROIDS moving by script, but still needs an array to store them in!)
artType	[0]	int		0				//already on map
artVal	[0]	int		0				//index into features			
artX	[0]	int		576				//coords of artifact
artY	[0]	int		3008
artComp	[0]	RESEARCHSTAT	"R-Wpn-Flamer01Mk1"	//research topic given when artifact collected

artType	[1]	int		1				//get from structure
artVal	[1]	int		0				//index into structures when structure destroyed
artX	[1]	int		3136				//coords to place artifact
artY	[1]	int		832
artComp	[1]	RESEARCHSTAT	"R-Defense-Tower01"	//research topic given when artifact collected

artType	[2]	int		2				//get from feature
artVal	[2]	int		1				//index into features
artX	[2]	int		4416				//coords to place artifact when feature destroyed
artY	[2]	int		2752
artComp	[2]	RESEARCHSTAT	"R-Sys-Sensor-Turret01"	//research topic given when artifact collected

artType	[3]	int		3				//get from droid
artVal	[3]	int		0				//index into droids
artX	[3]	int		5696
artY	[3]	int		1856
artComp	[3]	RESEARCHSTAT	"R-Vehicle-Prop-Halftracks"	//research topic given when artifact collected

artType	[4]	int		4				//given on completing mission (don't include when counting for victoryArt!)
artVal	[4]	int		0				//not used for this type, leav as 0
artX	[4]	int		0				//not used for this type, leav as 0
artY	[4]	int		0				//not used for this type, leav as 0
artComp	[4]	RESEARCHSTAT	"R-Wpn-Mortar01Lt"	//research topic given when artifact collected


/* ********************************************	*/
/* lists of stuff referred to by index number 	*/
/* ********************************************	*/

/* ********************************************	*/
/* FEATURES (inc crates, by ID number)	MAX = 10	*/
features	[0]	FEATURE		649		//crate artifact ID number(already on map)
features	[1]	FEATURE		661		//feature to get next artifact, eg warehouse

/* ********************************************	*/
/* STRUCTURES (by ID number)		MAX = 10	*/
structures	[0]	STRUCTURE	223		//factory 0, gives artifact
structures	[1]	STRUCTURE	650		//some other structure, eg gives an artifact
structures	[2]	STRUCTURE	481		//factory 1
structures	[3]	STRUCTURE	623		//factory 2


/* ********************************************	*/
/* DROIDS (by ID number)		MAX = 10	*/
droids		[0]	DROID		3279		//gives up artifact when dead at its coords
droids		[1]	DROID		1234		//this is a sensor droid that acts as sesnor for group 1 IDF (indexes match!)

/* ********************************************	*/
/* list of templates (by name)		 MAX = 20	*/
/* ********************************************	*/
//keep each enemies templates together
templates	[0]	TEMPLATE	"BaBaPeople"		//scavenger templates
templates	[1]	TEMPLATE	"BarbarianTrike"
templates	[2]	TEMPLATE	"BarbarianBuggy"
templates	[3]	TEMPLATE	"BabaJeep"
templates	[4]	TEMPLATE	"BabaRKJeep"
templates	[5]	TEMPLATE	"BarbarianRKBuggy"
templates	[6]	TEMPLATE	"BabaBusCan"
templates	[7]	TEMPLATE	"BabaFireCan"

templates[8]	TEMPLATE	"NP-M-MdCannon-Halftrack"	//New Paradigm templates
templates[9]	TEMPLATE	"NP-H-MdCannon-Tracks"
templates[10]	TEMPLATE	"NP-M-BB-Halftrack"
templates[11]	TEMPLATE	"NP-H-HvyCannon-Tracks"
templates[12]	TEMPLATE	"NP-M-Sensor-Wheels"
templates[13]	TEMPLATE	"NP-M-HvyMortar-Halftrack"

templates[14]	TEMPLATE	"CyborgChain01Ground"		//NP Cyborg Templates
templates[15]	TEMPLATE	"CyborgFlamer01Grd"
templates[16]	TEMPLATE	"CyborgCannon01Grd"



/* ********************************************	*/
//coordinates (world coords)		MAX = 10
/* ********************************************	*/
coordsX		[0]	int		3136		//factory 0 Assembly
coordsY		[0]	int		1472
coordsX		[1]	int		5824		//factory 1 Assembly (and valley group retreat!)
coordsY		[1]	int		2368
coordsX		[2]	int		5184		//factory 2 Assembly
coordsY		[2]	int		6592

coordsX		[3]	int		832		//1st waypoint for group 0
coordsY		[3]	int		6848

coordsX		[4]	int		1856		//2nd waypoint for group 0
coordsY		[4]	int		7104

coordsX		[5]	int		2624		//group 2 waypoint1
coordsY		[5]	int		5952
coordsX		[6]	int		2752		//group 2 waypoint2
coordsY		[6]	int		6720
coordsX		[7]	int		2496		//group 2 waypoint3
coordsY		[7]	int		7488
coordsX		[8]	int		1728		//group 2 waypoint4
coordsY		[8]	int		7744


/* ********************************************	*/
//regions (world coords)		MAX = 20
/* ********************************************	*/
regionsX1	[0]	int		2624		//enemy base0 blip
regionsY1	[0]	int		448
regionsX2	[0]	int		3648
regionsY2	[0]	int		1344
regionsX1	[1]	int		4800		//enemy base1 blip
regionsY1	[1]	int		1472
regionsX2	[1]	int		6464
regionsY2	[1]	int		2880
regionsX1	[2]	int		4288		//enemy base2 blip
regionsY1	[2]	int		5952
regionsX2	[2]	int		6208
regionsY2	[2]	int		7488
	
regionsX1	[3]	int		320		//base 0 Factory trigger region
regionsY1	[3]	int		4160		
regionsX2	[3]	int		2368
regionsY2	[3]	int		5184	
regionsX1	[4]	int		1984		//group 0 trigger region
regionsY1	[4]	int		832
regionsX2	[4]	int		3008
regionsY2	[4]	int		2368
regionsX1	[5]	int		3904		//group 3 trigger region
regionsY1	[5]	int		2496
regionsX2	[5]	int		5312
regionsY2	[5]	int		4288	

regionsX1	[6]	int		3136		//group 0 defining region
regionsY1	[6]	int		13632
regionsX2	[6]	int		3520
regionsY2	[6]	int		14016	
regionsX1	[7]	int		4288		//group 1 defining region
regionsY1	[7]	int		8000
regionsX2	[7]	int		5056
regionsY2	[7]	int		8640
regionsX1	[8]	int		5184		//group 2 defining region
regionsY1	[8]	int		7232
regionsX2	[8]	int		5696
regionsY2	[8]	int		7744	
regionsX1	[9]	int		4928		//group 3 defining region
regionsY1	[9]	int		6592
regionsX2	[9]	int		5440
regionsY2	[9]	int		7104

regionsX1	[10]	int		2624		//LZ region for victory
regionsY1	[10]	int		448
regionsX2	[10]	int		3648
regionsY2	[10]	int		1344

/* ********************************************	*/
/* sector Stuff */
/* ********************************************	*/
//sectors to attack (for scout and attack groups only)
//split map into regions, groups can then go to random positions in each region
//as their waypoints, looking for player targets.

//MAX = 20
sectorsX1	[0]	int		10432
sectorsY1	[0]	int		12736
sectorsX2	[0]	int		14272
sectorsY2	[0]	int		15552

sectorsX1	[1]	int		8896
sectorsY1	[1]	int		13760
sectorsX2	[1]	int		10304
sectorsY2	[1]	int		15040

sectorsX1	[2]	int		6336
sectorsY1	[2]	int		13760
sectorsX2	[2]	int		8768
sectorsY2	[2]	int		14144

sectorsX1	[3]	int		2112
sectorsY1	[3]	int		12736
sectorsX2	[3]	int		6336
sectorsY2	[3]	int		14784

sectorsX1	[4]	int		1600
sectorsY1	[4]	int		10176
sectorsX2	[4]	int		5952
sectorsY2	[4]	int		12608

sectorsX1	[5]	int		4672
sectorsY1	[5]	int		8640
sectorsX2	[5]	int		5696
sectorsY2	[5]	int		10048

/* ********************************************	*/
/* Enemy Base Blips */
/* ********************************************	*/
numBases		int		0		//MAX = 5. Must be same as number of bases listed next
basePlayer	[0]	int		0		//enemy player number who owns base, ie enemy[0]
baseMsg		[0]	INTMESSAGE	"FAST_BASE1"	//enemy base blip message (prox.txt)
baseRegion	[0]	int		0		//index to regions that defines base boundaries (blip appears when player sees any structure in these boundaries), also area to destroy walls when base is dead.
baseWav1	[0]	int		2		//sound to play when first seen (index to baseSnd)	Superior Weapons
baseWav2	[0]	int		3		//sound to play when base dead (index to baseSnd)	Eradicated

basePlayer	[1]	int		1		//enemy player who owns base, ie enemy[1]
baseMsg		[1]	INTMESSAGE	"FAST_BASE2"
baseRegion	[1]	int		1		//index to regions
baseWav1	[1]	int		0		//index to baseSnd	enemy detected
baseWav2	[1]	int		3		//index to baseSnd	Eradicated

/* ********************************************	*/
/* Enemy Groups */
/* ********************************************	*/
numGroups		int		6	//group MAX = 10

//group 0 (Ambush group) Use this type to get units moving in set patterns once triggered
grpType		[0]	int		0		//0 = Ambush/Patrol
grpPlayer	[0]	int		0		//player index, ie enemy[0]
grpRegion	[0]	int		6		//index in regions array to define group
grpTimeGo	[0]	int		-1		//-1 = no time trigger
grpRegionGo	[0]	int		4		//index in regions to use as trigger
grpWhoGo	[0]	int		0		//player number (0-7) that needs to enter trigger region to trigger group
grpMorale	[0]	int		-1		//-1 = don't set morale/leadership/retreat
grpLeadership	[0]	int		0		//leave zero if morale not set
grpRetreatXY	[0]	int		0		//leave zero if morale not set
grpPosStart	[0]	int		3		//starting waypoint (goes here when triggered)
grpPosMin	[0]	int		3		//Minimum index in coords array for waypoints
grpPosMax	[0]	int		4		//Maximum index in coords array for waypoints
grpPosStep	[0]	int		1		//Step increase for next 'waypoint'
grpPosType	[0]	int		0		//0 = stop when get to last waypoint
grpFactory	[0]	int		-1		//-1 = any factory can reinforce this group
grpIdealSize	[0]	int		0		//0 = don't reinforce (ideal size. If less than this factory will reinforce)

//group 1 (IDF group) Use this group to link to a sensor of same index (not quite finished in SLO, but shouldn't crash) 
grpType		[1]	int		-1		//-1 = Indirect Fire (IDF). There must be a corresponding sensor droid with same index
								// in this case 1, ie droids[1] must be a sensor droid. Don't use this type if too confusing!
grpPlayer	[1]	int		0		//player index, ie enemy[0]
grpRegion	[1]	int		7		//index in regions array to define group
grpTimeGo	[1]	int		-1		//-1 = don't use time trigger (sensor will move this IDF group)

grpRegionGo	[1]	int		-1		//-1 = don't use a region to trigger (sensor will move this IDF group)
grpWhoGo	[1]	int		0			//leave zero if region trigger not used
grpMorale	[1]	int		90		//pretty timid! morale check when group size is 90% of original
grpLeadership	[1]	int		25		//25% chance of not running away when morale checked 
grpRetreatXY	[1]	int		0		//retreat coords(index in coords array), points to factory 0's assembly point
grpPosStart	[1]	int		-1		//don't use waypoints
grpPosMin	[1]	int		0		//leave 0 if waypoints not used
grpPosMax	[1]	int		0		//leave 0 if waypoints not used
grpPosStep	[1]	int		0		//leave 0 if waypoints not used
grpPosType	[1]	int		0		//leave 0 if waypoints not used
grpFactory	[1]	int		0		//reinforce from factory 0
grpIdealSize	[1]	int		6		//ideal size. If less than this factory will reinforce

//group 2 (defence group) Use this group to defend a base (or whole map if desired). Can be on a patrol route using waypoints, will only deviate from this if a structure in grpRegionGo is attacked, then when attacker destroyed, continues on patrol route
grpType		[2]	int		1		//1 = Defence
grpPlayer	[2]	int		1		//player index, ie enemy[1]
grpRegion	[2]	int		8		//index in regions array to define group
grpTimeGo	[2]	int		2		//2 = 20s before starts to move (always make >= 0 for defence forces)
grpRegionGo	[2]	int		0		//index into regions to protect (usually a base blip region)
grpWhoGo	[2]	int		0		//player number (0-7) that needs to attack structures in  trigger region to make this group break off patrol and defend
grpMorale	[2]	int		55		//pretty solid! morale check when group size is 55% of original
grpLeadership	[2]	int		75		//75% chance of not running away when morale checked
grpRetreatXY	[2]	int		1		//retreat (index in coords array) factory 1 assembly point
grpPosStart	[2]	int		7		//index in coords array (depends on grpType)
grpPosMin	[2]	int		5		//Minimum index in coords array
grpPosMax	[2]	int		8		//Maximum index in coords array
grpPosStep	[2]	int		-1		//Step increase for next 'waypoint'
grpPosType	[2]	int		1		//1 = loop
grpFactory	[2]	int		0		//index factory to reinforce group. -1 = any factory.
grpIdealSize	[2]	int		2		//ideal size. If less than this factory will reinforce

//group 3 (scout group). This uses SECTORS, and will flag targets for use by attack groups. will run away if sees more targets than units in its own group even if morale not set.
grpType		[3]	int		2		//2 = Scout, 3 = Attack...
grpPlayer	[3]	int		1		//player index, ie enemy[1]
grpRegion	[3]	int		9		//index in regions array to define group
grpTimeGo	[3]	int		4		//40s time trigger
grpRegionGo	[3]	int		5		//index in regions to use as trigger (can use time AND region triggers)
grpWhoGo	[3]	int		0		//player number (0-7) that needs to enter trigger region to trigger group
grpMorale	[3]	int		-1		//no morale checks
grpLeadership	[3]	int		0		//leave zero if morale not set
grpRetreatXY	[3]	int		0		//leave zero if morale not set
grpPosStart	[3]	int		3		//index in SECTORS array (scout groups use sectors)
grpPosMin	[3]	int		0		//Minimum index in coords array
grpPosMax	[3]	int		4		//Maximum index in coords array
grpPosStep	[3]	int		1		//Step increase for next 'waypoint'
grpPosType	[3]	int		2		//2 = pingpong
grpFactory	[3]	int		-1		//index factory to reinforce group. -1 = any factory.
grpIdealSize	[3]	int		4		//ideal size. If less than this factory will reinforce

//group 4 (attack group). Again uses SECTORS. Will patrol sectors until targets found, by scout or attack groups, then goes to target coords. This group doesn't exist at start, but is reinforced by factory 1 which is a phantom factory (used for units coming in off edge of map)
grpType		[4]	int		0		//3 = Attack...
grpPlayer	[4]	int		0		//player index, ie enemy[0]
grpRegion	[4]	int		-1		//doesn't exist at start, made up from factories
grpTimeGo	[4]	int		5		//20s time trigger (always make >= 0 for defence forces)
grpRegionGo	[4]	int		-1		//no region. index in regions array as trigger
grpWhoGo	[4]	int		0		//leave zero if region trigger not used
grpMorale	[4]	int		90		//morale = 90%
grpLeadership	[4]	int		45		//leadership value = 45%
grpRetreatXY	[4]	int		1		//retreat (index in coords array) factory 1 assembly
grpPosStart	[4]	int		4		//index in SECTORS array (attack groups use sectors)
grpPosMin	[4]	int		0		//Minimum index in SECTORS array
grpPosMax	[4]	int		4		//Maximum index in SECTORS array
grpPosStep	[4]	int		-1		//Step increase for next 'waypoint'
grpPosType	[4]	int		3		//3 = random thru waypoints
grpFactory	[4]	int		1		//index factory to reinforce group. -1 = any factory.
grpIdealSize	[4]	int		6		//ideal size. If less than this factory will reinforce

//group 5. Transport example group (can be any type). Main point is that it is reinforced by factory 2, which is a transport type phantom factory.
grpType		[5]	int		0		//0 = Ambush/Patrol
grpPlayer	[5]	int		0		//player index, ie enemy[0]
grpRegion	[5]	int		-1		//doesn't exist at start, made up from factories
grpTimeGo	[5]	int		0		//go immediately
grpRegionGo	[5]	int		-1		//no region. index in regions array as trigger
grpWhoGo	[5]	int		0		//player number to cross trigger region (may not need?)
grpMorale	[5]	int		25		//morale = 50%
grpLeadership	[5]	int		50		//leadership value = 75%
grpRetreatXY	[5]	int		1		//retreat (index in coords array) base2 assembly
grpPosStart	[5]	int		7		//index in coords array (depends on grpType)
grpPosMin	[5]	int		5		//Minimum index in coords array
grpPosMax	[5]	int		8		//Maximum index in coords array
grpPosStep	[5]	int		1		//Step increase for next 'waypoint'
grpPosType	[5]	int		1		//1 = loop
grpFactory	[5]	int		2		//index factory to reinforce group. This points to 'transport' factory
grpIdealSize	[5]	int		10		//ideal size. If less than this factory will reinforce


/* Factories */
numFactories		int		3		//MAX = 10

//typical factory
factID		[0]	int		0		//index to structures
factAssXY	[0]	int		0		//index to assembly point. -1 for don't set
factTimeGo	[0]	int		-1		//delay before starting production in 10s
factRegionGo	[0]	int		3		//region index (assume WhoGo = 0, ie player has to enter this region)
factTempMin	[0]	int		0		//index to starting template
factTempMax	[0]	int		2		//index to maximum template
factEvery	[0]	int		5		//50s .Time in 10s for factory to try to produce again

//special case phantom factory
factID		[1]	int		-1		//phantom factory, places units on map (usually edge)
factAssXY	[1]	int		1		//index to coords to place generated units
factTimeGo	[1]	int		6		//60s delay before starting production  (multiples of 10s)
factRegionGo	[1]	int		-1		//-1 = no region for trigger (assume WhoGo = 0)
factTempMin	[1]	int		0		//index to starting template
factTempMax	[1]	int		3		//index to maximum template
factEvery	[1]	int		30		//5 mins .Time in 10s for factory to try to produce again

//transport type phantom factory
factID		[2]	int		-2		//phantom factory, uses transport
factAssXY	[2]	int		1		//index to LZs (point to correct one for enemy number, eg 2 for player 2 Collective)
factTimeGo	[2]	int		-1		//delay before starting production in 10s
factRegionGo	[2]	int		5		//region to trigger transport
factTempMin	[2]	int		1		//index to starting template
factTempMax	[2]	int		4		//index to maximum template
factEvery	[2]	int		36		//6 mins .Time in 10s for factory to produce again

/* 'Globals' */
//These should be same in each file, but may need slight alterations
player		int		0				//player's player number
crate		FEATURESTAT	"Crate"
artRange	int		200	//171				//range to artifact about 1.5 tiles
objectiveRange	int		640				//range to objective 5 Tiles
wayRange	int		300				//range to waypoint 2ish tiles
targetRange	int		768				//range for target spotting
targetMax	int		4				//maximum number of targets to store for each enemy
lostSnd		SOUND		"pcv470.ogg"		//mission failed
attackSnd1	SOUND		"pcv337.ogg"	//Base Under Attack
artSnd1		SOUND		"pcv351.ogg"	//artifact sounds
artSnd2		SOUND		"pcv352.ogg"
transporter	TEMPLATE	"Transporter"	//for enemy transports
endMsg		INTMESSAGE	"END"

//base WAVs. MAX = 5
baseSnd[0]	SOUND		"pcv379.ogg"	//Enemy Base Detected
baseSnd[1]	SOUND		"pcv379.ogg"	//Enemy Base Detected
baseSnd[2]	SOUND		"pcv379.ogg"	//Enemy Base Detected
baseSnd[3]	SOUND		"pcv394.ogg"	//Enemy base eradicated

/* NEW STUFF for trucks */
//trucksOn		BOOL			TRUE		//switch for using trucks (won't work without it!)
/* Defence Type Structures for any enemy to build */
numDefences		int			2	//MAX = 5
defences[0]		STRUCTURESTAT	"PillBox2"
defences[1]		STRUCTURESTAT	"PillBox3"
maxDefence		int			3		//ideal number of defences to build
/* structures to defend */
numToDefend		int			2	//MAX = 5
toDefend[0]		STRUCTURESTAT	"A0ResourceExtractor"
toDefend[1]		STRUCTURESTAT	"A0CommandCentreCO" //"A0PowerGenerator"
/* extra Globals */
oilRes		FEATURESTAT		"OilResource"
truckRange		int			1024	//range for truck to check for defendable structures
defRange		int			512	//range for defences to be for defendable structures
/* end of NEW STUFF */

/* NEW STUFF FOR THREAT ASSESSMENT */
//this only works on groups with Morale Values
//if not declared just won't do anything!!
threatLight		int			2	//value for light vehicles
threatMedium	int			4	//value for medium vehicles
threatHeavy		int			8	//value for large vehicles
threatRange		int			750	//range to check for enemy and player threats
/* end of NEW STUFF */

/* NEW STUFF fro RETURN TO LZ type victory condition blip and audio */
retLZFlag		BOOL		TRUE				//must be set true to activate
retLZSnd		SOUND		"pcv427.ogg"		//for victory condition of get all player stuff to region
retLZBlip		INTMESSAGE	"C22_LZ"			//Blip for LZ
/* end of NEW STUFF */

}
