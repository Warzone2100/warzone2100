//tech.slo
//setup starting STRUCTURES, COMPONENTS and FUNCTIONS

/* ********************	*/
/* Declared Variables 	*/
/* ********************	*/

public		int		player;
//starting Tech
public		int		numTechs;
public		RESEARCHSTAT	startTech[45];
public		int		numStructs;
public		STRUCTURESTAT	startStruct[50];
public		int		numWeapons;
public		WEAPON		startWeapon[50];
public		int		numBodies;
public		BODY		startBody[15];
public		int		numProps;
public		PROPULSION	startProp[10];
public		int		numConstructs;
public		CONSTRUCT	startConstruct[10];
public		int		numSensors;
public		SENSOR		startSensor[10];
public		int		numECMs;
public		ECM		startECM[10];
public		int		numRepairs;
public		REPAIR		startRepair[10];
public		int		numBrains;
public		BRAIN		startBrain[10];
public		int		numResearch;
public		RESEARCHSTAT	startResearch[5];
private		int		count, temp;

event start(CALL_GAMEINIT)
{
	// give player starting tech
	count = 0;
	while (count < numTechs)
	{
		completeResearch(startTech[count], player);
		count = count + 1;
	}
	count = 0;
	while (count < numStructs)
	{
		enableStructure(startStruct[count], player);
		count = count + 1;
	}
	count = 0;
	while (count < numWeapons)
	{
		makeComponentAvailable(startWeapon[count], player);
		count = count + 1;
	}
	count = 0;
	while (count < numBodies)
	{
		makeComponentAvailable(startBody[count], player);
		count = count + 1;
	}
	count = 0;
	while (count < numProps)
	{
		makeComponentAvailable(startProp[count], player);
		count = count + 1;
	}
	count = 0;
	while (count < numConstructs)
	{
		makeComponentAvailable(startConstruct[count], player);
		count = count + 1;
	}
	count = 0;
	while (count < numSensors)
	{
		makeComponentAvailable(startSensor[count], player);
		count = count + 1;
	}
	count = 0;
	while (count < numECMs)
	{
		makeComponentAvailable(startECM[count], player);
		count = count + 1;
	}
	count = 0;
	while (count < numRepairs)
	{
		makeComponentAvailable(startRepair[count], player);
		count = count + 1;
	}
	count = 0;
	while (count < numBrains)
	{
		makeComponentAvailable(startBrain[count], player);
		count = count + 1;
	}
	// give player starting research
	count = 0;
	while (count < numResearch)
	{
		enableResearch(startResearch[count], player);
		count = count + 1;
	}
}

