// Warzone settings for all configurations


// CODE_SIGN_RESOURCE_RULES_PATH = "$(SRCROOT)/configs/ResourceRules.plist"

INSTALL_PATH = $(HOME)/Applications
LD_RUNPATH_SEARCH_PATHS = @loader_path/../Frameworks
PREBINDING = NO
APPLY_RULES_IN_COPY_FILES = YES
CLANG_ENABLE_OBJC_ARC = YES
INFOPLIST_FILE = Resources/Warzone-Info.plist
INFOPLIST_OTHER_PREPROCESSOR_FLAGS = -traditional
INFOPLIST_PREFIX_HEADER = $(OBJROOT)/autorevision.h
INFOPLIST_PREPROCESS = YES
PRODUCT_NAME = Warzone
PRODUCT_BUNDLE_IDENTIFIER = net.wz2100.$(PRODUCT_NAME)
WRAPPER_EXTENSION = app

FRAMEWORK_SEARCH_PATHS = $(inherited) $(FRAMEWORK_SEARCH_PATHS_QUOTED_1) $(FRAMEWORK_SEARCH_PATHS_QUOTED_2) $(FRAMEWORK_SEARCH_PATHS_QUOTED_3) $(FRAMEWORK_SEARCH_PATHS_QUOTED_4)

HEADER_SEARCH_PATHS = $(inherited) $(HEADER_SEARCH_PATHS_QUOTED_1) $(HEADER_SEARCH_PATHS_QUOTED_2) $(HEADER_SEARCH_PATHS_QUOTED_3)

LIBRARY_SEARCH_PATHS = $(inherited) $(LIBRARY_SEARCH_PATHS_QUOTED_1) $(LIBRARY_SEARCH_PATHS_QUOTED_3) $(LIBRARY_SEARCH_PATHS_QUOTED_4)

USER_HEADER_SEARCH_PATHS = "$(SRCROOT)/.."

GCC_C_LANGUAGE_STANDARD = c11
CLANG_CXX_LANGUAGE_STANDARD = c++0x
CLANG_CXX_LIBRARY = libc++

//GCC_ENABLE_SSE3_EXTENSIONS = YES // -msse3
//GCC_MODEL_TUNING = G5
//CLANG_X86_VECTOR_INSTRUCTIONS = default
GCC_PREPROCESSOR_DEFINITIONS = $(inherited) $(BUILD_PREPROCESSOR_DEFINITIONS) OV_EXCLUDE_STATIC_CALLBACKS

OTHER_CFLAGS = $(FlagsForCandCpp) $(WarnForC) $(inherited)
OTHER_CFLAGS[arch=i386] = $(inherited) // intel 32 bit only
OTHER_CFLAGS[arch=x86_64] = $(inherited) // intel 64 bit only

OTHER_CPLUSPLUSFLAGS = $(FlagsForCandCpp) $(WarnForCpp)
OTHER_CPLUSPLUSFLAGS[arch=i386] = $(inherited) // intel 32 bit only
OTHER_CPLUSPLUSFLAGS[arch=x86_64] = $(inherited) // intel 64 bit only

// Entitlements
CODE_SIGN_ENTITLEMENTS = Resources/Warzone.entitlements


// Warnings
GCC_WARN_CHECK_SWITCH_STATEMENTS = YES // -Wswitch
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES // -Wmissing-braces
GCC_WARN_ABOUT_RETURN_TYPE = YES // -Wreturn-type
GCC_WARN_MISSING_PARENTHESES = YES // -Wparentheses
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES // -Wmissing-field-initializers
GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = NO // FIXME: -Wno-format  Hides some "format not a string literal and no format arguments" warnings; these should be fixed at some point
GCC_WARN_UNDECLARED_SELECTOR = YES // -Wundeclared-selector
GCC_WARN_UNUSED_FUNCTION = YES // -Wunused-function
GCC_WARN_UNUSED_LABEL = YES // -Wunused-label
GCC_WARN_UNUSED_VALUE = YES // -Wunused-value
GCC_WARN_UNUSED_VARIABLE = YES // -Wunused-variable
GCC_WARN_64_TO_32_BIT_CONVERSION = NO // FIXME: Hides "Implicit conversion loses integer precision" warnings; these should be fixed at some point
CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES
GCC_WARN_FOUR_CHARACTER_CONSTANTS = YES
GCC_WARN_SHADOW = NO // FIXME: Hides shadowing warnings; these should probably be audited at some point
CLANG_WARN_INFINITE_RECURSION = YES
GCC_WARN_ABOUT_MISSING_PROTOTYPES = NO // Hides missing prototypes warnings
CLANG_WARN_ASSIGN_ENUM = YES
CLANG_WARN_STRICT_PROTOTYPES = NO // FIXME: Hides 'Strict prototype' warnings; these should be fixed at some point
CLANG_WARN_COMMA = YES
CLANG_WARN_UNREACHABLE_CODE = NO // FIXME: Hides Unreachable code warnings; these should be fixed at some point
GCC_WARN_UNUSED_PARAMETER = NO // FIXME: Hides some "Unused parameter" warnings; these should be fixed at some point
GCC_WARN_SIGN_COMPARE = YES
GCC_WARN_UNKNOWN_PRAGMAS = YES

// C++ Warnings
GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES
GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES
CLANG_WARN_SUSPICIOUS_MOVE = YES
CLANG_WARN_CXX0X_EXTENSIONS = YES

// Objective-C Warnings
CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES = YES
GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL = YES
CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES
GCC_WARN_STRICT_SELECTOR_MATCH = YES
GCC_WARN_UNDECLARED_SELECTOR = YES
CLANG_WARN_OBJC_ROOT_CLASS = YES
CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE = YES
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES
CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK = YES
CLANG_WARN__ARC_BRIDGE_CAST_NONARC = YES

// Build setting dependent warnings
WarnForCandCpp = -Wall -Wcast-align -Wwrite-strings -Wpointer-arith $(WarnForCandCppDep)
WarnForC = -Wstrict-prototypes -Wdeclaration-after-statement $(WarnForCDep)
WarnForCpp = $(WarnForCppDep)

// Additional build flags for both c and c++ files
FlagsForCandCpp = $(BuildDependentFlagsForCandCpp) $(WarnForCandCpp)
FlagsForCandCpp[arch=i386] = $(inherited) // Flags for intel 32 bit only
