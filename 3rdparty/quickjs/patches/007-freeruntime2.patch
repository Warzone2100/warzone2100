diff --git a/quickjs.c b/quickjs.c
--- a/quickjs.c
+++ b/quickjs.c
@@ -1954,6 +1954,11 @@ void JS_SetRuntimeInfo(JSRuntime *rt, const char *s)
 }
 
 void JS_FreeRuntime(JSRuntime *rt)
+{
+	JS_FreeRuntime2(rt, NULL);
+}
+
+void JS_FreeRuntime2(JSRuntime *rt, void (*gc_leak_handler)(const char* msg))
 {
     struct list_head *el, *el1;
     int i;
@@ -2009,7 +2014,11 @@ void JS_FreeRuntime(JSRuntime *rt)
             printf("Secondary object leaks: %d\n", count);
     }
 #endif
-    assert(list_empty(&rt->gc_obj_list));
+    if (!list_empty(&rt->gc_obj_list)) {
+		if (gc_leak_handler != NULL) {
+			gc_leak_handler("gc_obj_list is not empty");
+		}
+	}
 
     /* free the classes */
     for(i = 0; i < rt->class_count; i++) {
diff --git a/quickjs.h b/quickjs.h
--- a/quickjs.h
+++ b/quickjs.h
@@ -359,6 +359,7 @@ void JS_SetMaxStackSize(JSRuntime *rt, size_t stack_size);
 void JS_UpdateStackTop(JSRuntime *rt);
 JSRuntime *JS_NewRuntime2(const JSMallocFunctions *mf, void *opaque);
 void JS_FreeRuntime(JSRuntime *rt);
+void JS_FreeRuntime2(JSRuntime *rt, void (*gc_leak_handler)(const char* msg));
 void *JS_GetRuntimeOpaque(JSRuntime *rt);
 void JS_SetRuntimeOpaque(JSRuntime *rt, void *opaque);
 typedef void JS_MarkFunc(JSRuntime *rt, JSGCObjectHeader *gp);
