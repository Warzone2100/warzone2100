name: Windows

on:
  push:
    branches-ignore:
      - 'l10n_**' # Push events to translation service branches (that begin with "l10n_")
    # Sequence of patterns matched against refs/tags
    tags:
      - '*'
  pull_request:
    # Match all pull requests

jobs:
  windows-build:
    strategy:
      matrix:
        compiler: ["MSVC_2019"]
        architecture: ["x86", "x64", "arm64"]
        deploy_release: [true]
      fail-fast: false
    env:
      WZ_MSVC_VER: ${{ matrix.compiler }}
      WZ_TARGET_ARCH: ${{ matrix.architecture }}
      VSCMD_SKIP_SENDTELEMETRY: 1
      # MSVC parallel builds: https://devblogs.microsoft.com/cppblog/improved-parallelism-in-msbuild/
      UseMultiToolTask: true
      EnforceProcessCountAcrossBuilds: true
    name: '${{ matrix.architecture }} [${{ matrix.compiler }}]'
    runs-on: windows-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: 'src'
    - name: Prepare Git Repo for autorevision
      working-directory: '${{ github.workspace }}\src'
      run: cmake -P .ci/githubactions/prepare_git_repo.cmake
    - name: Init Git Submodules
      working-directory: '${{ github.workspace }}\src'
      run: git submodule update --init --recursive
    # - name: Output Runner Environment Information
    #   run: |
    #     Write-Host "------------------------------------------------------"
    #     Write-Host "Environment Variables"
    #     Write-Host "------------------------------------------------------"
    #     & gci env:* | sort-object name
    - name: Install Asciidoctor
      run: gem install asciidoctor -v 2.0.12 --no-document
    - name: Install NSIS
      run: choco install nsis -y
    - name: Generate Settings for Run [${{ matrix.compiler }}:${{ matrix.architecture }}]
      id: settings
      run: |
        # Basic variable setup
        # --------------------

        $WZ_VC_TARGET_PLATFORMNAME = "$env:WZ_TARGET_ARCH"
        $WZ_BUILD_DESC = "win_${env:WZ_TARGET_ARCH}"

        if ($env:WZ_TARGET_ARCH -eq "x86") {
          $VCPKG_DEFAULT_TRIPLET = "x86-windows"
          $WZ_VC_TARGET_PLATFORMNAME = "Win32" # special case, map "x86" -> "Win32"
        }
        elseif ($env:WZ_TARGET_ARCH -eq "x64") {
          $VCPKG_DEFAULT_TRIPLET = "x64-windows"
        }
        elseif ($env:WZ_TARGET_ARCH -eq "arm64") {
          $VCPKG_DEFAULT_TRIPLET = "arm64-windows"
        }

        # ------------------------------
        # MSVC version / generator info

        $WZ_VISUAL_STUDIO_INSTALL_PATH = ""
        if ($env:WZ_MSVC_VER -eq "MSVC_2019") {
          $WZ_VC_GENERATOR = "Visual Studio 16 2019"
          #$env:WZ_VC_TOOLCHAIN = "v142"
          # Get the installation path for a specific version of MSVC (2019)
          $WZ_VISUAL_STUDIO_INSTALL_PATH = & "vswhere.exe" -latest -property installationPath -version "[16.0,17.0)"
          if ($LastExitCode -ne 0)
          {
            echo "::warning ::Could not find MSVC 2019"
            $WZ_VISUAL_STUDIO_INSTALL_PATH = ""
          }
        }
        elseif ($env:WZ_MSVC_VER -eq "MSVC_2017") {
          $WZ_VC_GENERATOR = "Visual Studio 15 2017"
          #$env:WZ_VC_TOOLCHAIN = "v141"
          # Get the installation path for a specific version of MSVC (2017)
          $WZ_VISUAL_STUDIO_INSTALL_PATH = & "vswhere.exe" -latest -property installationPath -version "[15.0,16.0)"
          if ($LastExitCode -ne 0)
          {
            echo "::warning ::Could not find MSVC 2017"
            $WZ_VISUAL_STUDIO_INSTALL_PATH = ""
          }
        }

        if ([string]::IsNullOrWhitespace(${WZ_VISUAL_STUDIO_INSTALL_PATH}))
        {
          $WZ_VISUAL_STUDIO_INSTALL_PATH = & "vswhere.exe" -latest -property installationPath
          echo "::warning ::Default to 'latest' MSVC: `"${WZ_VISUAL_STUDIO_INSTALL_PATH}`""
        }
        
        $WZ_VISUAL_STUDIO_INSTALL_VERSION = & "vswhere.exe" -path "${WZ_VISUAL_STUDIO_INSTALL_PATH}" -property installationVersion
        echo "WZ_VISUAL_STUDIO_INSTALL_VERSION = ${WZ_VISUAL_STUDIO_INSTALL_VERSION}"

        $VCPKG_VISUAL_STUDIO_PATH = "${WZ_VISUAL_STUDIO_INSTALL_PATH}"
        #$CMAKE_GENERATOR_INSTANCE = "${WZ_VISUAL_STUDIO_INSTALL_PATH}"

        # -------------
        # Distributor

        $WZ_DISTRIBUTOR = "UNKNOWN"
        if (${env:GITHUB_REPOSITORY} -eq "Warzone2100/warzone2100") {
          $WZ_DISTRIBUTOR = "wz2100.net"
        }

        # ----------------
        # Determine vcpkg binary cache directory

        $VCPKG_BINARYCACHE_DIR = "${{ github.workspace }}\vcpkg_cache"
        $VCPKG_BINARY_SOURCES = "clear;files,${VCPKG_BINARYCACHE_DIR},readwrite"

        echo "VCPKG_BINARYCACHE_DIR = ${VCPKG_BINARYCACHE_DIR}"

        # ----------------
        # Export Variables

        # Export everything important to environment variables (for future steps)
        echo "WZ_REPO_PATH=${{ github.workspace }}\src" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "VCPKG_DEFAULT_TRIPLET=${VCPKG_DEFAULT_TRIPLET}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "WZ_VC_TARGET_PLATFORMNAME=${WZ_VC_TARGET_PLATFORMNAME}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "WZ_BUILD_DESC=${WZ_BUILD_DESC}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "WZ_VC_GENERATOR=${WZ_VC_GENERATOR}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        #echo "WZ_VC_TOOLCHAIN=${WZ_VC_TOOLCHAIN}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "WZ_VISUAL_STUDIO_INSTALL_PATH=${WZ_VISUAL_STUDIO_INSTALL_PATH}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "::set-output name=WZ_VISUAL_STUDIO_INSTALL_VERSION::${WZ_VISUAL_STUDIO_INSTALL_VERSION}"
        echo "VCPKG_VISUAL_STUDIO_PATH=${VCPKG_VISUAL_STUDIO_PATH}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "WZ_DISTRIBUTOR=${WZ_DISTRIBUTOR}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "::set-output name=VCPKG_BINARYCACHE_DIR::${VCPKG_BINARYCACHE_DIR}"
        echo "VCPKG_BINARY_SOURCES=${VCPKG_BINARY_SOURCES}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "::set-output name=VCPKG_BINARY_SOURCES::${VCPKG_BINARY_SOURCES}"
    #####################################################
    - name: 'Download & Install Vulkan SDK'
      run: |
        Start-Sleep -Milliseconds 1 # See: https://stackoverflow.com/a/49859001

        $VerbosePreference = "Continue"
        . "${env:WZ_REPO_PATH}\.ci\powershell\request.ps1"

        Write-Host "Current value of env:VULKAN_SDK:${env:VULKAN_SDK}"

        $VULKAN_DL_URL = "https://sdk.lunarg.com/sdk/download/1.2.170.0/windows/VulkanSDK-1.2.170.0-Installer.exe?Human=true"
        $VULKAN_DL_SHA256 = "7086ca300c3995caf5b5dc1c3ef50251fa95b650ee1bf22c9f5f52b94b228d38"

        $VK_DL_BASEDIR = "${{ github.workspace }}\dl"
        $VK_DL_PATH = "${VK_DL_BASEDIR}\vulkan.exe"
        New-Item -ItemType Directory -Force -Path "$VK_DL_BASEDIR"

        $req = Req -Params @{ 'Method'='GET';'Uri'="$VULKAN_DL_URL";'OutFile'="${VK_DL_PATH}" } -Retries 3 -SecondsDelay 10

        $vulkan_exe_hash = Get-FileHash -LiteralPath "${VK_DL_PATH}" -Algorithm SHA256
        if ($vulkan_exe_hash.Hash -eq $VULKAN_DL_SHA256) {
          Write-Host "Successfully downloaded VulkanSDK installer"
        } Else {
          Write-Error "The downloaded VulkanSDK installer hash '$($vulkan_exe_hash.Hash)' does not match the expected hash: '$VULKAN_DL_SHA256'"
        }

        Write-Host "Running Vulkan SDK installer..."
        Start-Process "${VK_DL_PATH}" -ArgumentList "/S" -Wait
        Write-Host "Vulkan SDK installer completed"

        $machineEnvironment = [Environment]::GetEnvironmentVariables("Machine")
        if (-not ($machineEnvironment.Contains("VULKAN_SDK")))
        {
          Write-Error "Failed to find updated VULKAN_SDK system environment variable"
        }
        Write-Host "New system VULKAN_SDK environment variable: $($machineEnvironment["VULKAN_SDK"])"

        # Ensure future steps pick up the new VULKAN_SDK environment variable
        echo "VULKAN_SDK=$($machineEnvironment["VULKAN_SDK"])" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - name: 'Check environment'
      run: |
        if ([string]::IsNullOrWhitespace(${env:VULKAN_SDK}))
        {
          Write-Error "Missing env:VULKAN_SDK in next step: ${env:VULKAN_SDK}"
        }
        else
        {
          # Verify the VULKAN_SDK path exists
          if (-not (Test-Path "${env:VULKAN_SDK}"))
          {
            Write-Error "env:VULKAN_SDK path does not exist: `"${env:VULKAN_SDK}`""
          }
        }
        Write-Output "env:VULKAN_SDK configured for the following steps: `"${env:VULKAN_SDK}`""
    - name: Create directories
      run: |
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\build"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\output"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\output\portable"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\output\installer"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\output\debugsymbols"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\output\archive"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\output\error_logs"
    - name: Cache vcpkg dependencies
      id: vcpkg-cache
      if: success() && !(github.event_name == 'push' && contains(github.ref, 'refs/tags/'))
      uses: actions/cache@v2
      with:
        path: ${{ steps.settings.outputs.VCPKG_BINARYCACHE_DIR }}
        key: ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.architecture }}-${{ steps.settings.outputs.WZ_VISUAL_STUDIO_INSTALL_VERSION }}-${{ hashFiles('**/get-dependencies_win.ps1') }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.architecture }}-${{ steps.settings.outputs.WZ_VISUAL_STUDIO_INSTALL_VERSION }}-${{ hashFiles('**/get-dependencies_win.ps1') }}-
    - name: Build vcpkg + dependencies
      working-directory: '${{ github.workspace }}\build'
      run: |
        Write-Host "env:VCPKG_DEFAULT_TRIPLET=`"${env:VCPKG_DEFAULT_TRIPLET}`""
        Write-Host "env:VCPKG_VISUAL_STUDIO_PATH=`"${env:VCPKG_VISUAL_STUDIO_PATH}`""
        Write-Host "env:VCPKG_BINARY_SOURCES=`"${env:VCPKG_BINARY_SOURCES}`""

        & ${env:WZ_REPO_PATH}\get-dependencies_win.ps1 -VCPKG_BUILD_TYPE "release"

        # Remove the vcpkg\buildtrees folder. (Once all dependencies are installed, it isn't needed, and it takes up a lot of space in the cache.)
        if (Test-Path .\vcpkg\buildtrees) { Remove-Item .\vcpkg\buildtrees -Force -Recurse -ErrorAction SilentlyContinue; }

        # Clean the build remnants of vcpkg itself. (Since it's rebuilt fresh - even from a cached vcpkg directory - these aren't needed.)
        . "${env:WZ_REPO_PATH}\.ci\powershell\importVCvars.ps1"
        Import-VCVarsEnv "${env:WZ_VISUAL_STUDIO_INSTALL_PATH}" "-arch=${env:WZ_TARGET_ARCH} -host_arch=x64"
    - name: CMake Configure (Portable Build)
      working-directory: '${{ github.workspace }}\build'
      env:
        CXXFLAGS: '/MP'
      run: |
        # Use CMake to configure with the appropriate Visual Studio (MSBUILD) generator, toolchain, and target platform (portable build)
        cmake -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\build\vcpkg\scripts\buildsystems\vcpkg.cmake" -DWZ_PORTABLE:BOOL=ON -DCPACK_PACKAGE_FILE_NAME:STRING="warzone2100_portable" -DWZ_DISTRIBUTOR:STRING="${env:WZ_DISTRIBUTOR}" -DCMAKE_GENERATOR_INSTANCE="${env:WZ_VISUAL_STUDIO_INSTALL_PATH}" -G "${env:WZ_VC_GENERATOR}" -A "${env:WZ_VC_TARGET_PLATFORMNAME}" "${env:WZ_REPO_PATH}"
    - name: CMake Build (Portable Build)
      env:
        CXXFLAGS: '/MP'
      run: |
        & cmake --build build --config Release --target package -- /m
        # Rename the portable installer
        Move-Item -LiteralPath ".\build\warzone2100_portable.exe" -Destination ".\output\portable\warzone2100_$($env:WZ_BUILD_DESC)_portable.exe"
        # Package the portable .pdb and .sym files into a "DEBUGSYMBOLS" .7z archive (do not include metadata / timestamps)
        cmd /c 7z a -t7z -m0=lzma -mx=9 -mtc=off -mtm=off -mta=off ".\output\debugsymbols\warzone2100_$($env:WZ_BUILD_DESC)_portable.DEBUGSYMBOLS.7z" "$($pwd)\build\src\*.pdb" "$($pwd)\build\src\*.sym"
    - name: Collect Failure Logs
      if: failure()
      run: |
        $NSIS_Log = "build\_CPack_Packages\win32\NSIS\NSISOutput.log"
        if (Test-Path $NSIS_Log -PathType Leaf)
        {
          Copy-Item -LiteralPath "$NSIS_Log" -Destination ".\output\error_logs"
        }
    - name: Upload Failure Logs Artifact
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: win_${{ matrix.architecture }}_error_logs
        path: '${{ github.workspace }}\output\error_logs'
        if-no-files-found: 'warn'
    - name: CMake Configure (Regular Installer)
      working-directory: '${{ github.workspace }}\build'
      env:
        CXXFLAGS: '/MP'
      run: |
        # Re-run CMake configure for non-portable (regular) installer
        cmake -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\build\vcpkg\scripts\buildsystems\vcpkg.cmake" -DWZ_PORTABLE:BOOL=OFF -DCPACK_PACKAGE_FILE_NAME:STRING="warzone2100_installer" -DWZ_DISTRIBUTOR:STRING="${env:WZ_DISTRIBUTOR}" -DCMAKE_GENERATOR_INSTANCE="${env:WZ_VISUAL_STUDIO_INSTALL_PATH}" -G "${env:WZ_VC_GENERATOR}" -A "${env:WZ_VC_TARGET_PLATFORMNAME}" "${env:WZ_REPO_PATH}"
    - name: CMake Build (Regular Installer)
      env:
        CXXFLAGS: '/MP'
      run: |
        & cmake --build build --config Release --target package
        # Rename the regular installer
        Move-Item -LiteralPath ".\build\warzone2100_installer.exe" -Destination ".\output\installer\warzone2100_$($env:WZ_BUILD_DESC)_installer.exe"
        # Package the portable .pdb and .sym files into a "DEBUGSYMBOLS" .7z archive (do not include metadata / timestamps)
        cmd /c 7z a -t7z -m0=lzma -mx=9 -mtc=off -mtm=off -mta=off ".\output\debugsymbols\warzone2100_$($env:WZ_BUILD_DESC)_installer.DEBUGSYMBOLS.7z" "$($pwd)\build\src\*.pdb" "$($pwd)\build\src\*.sym"
    - name: Compare Build Outputs
      working-directory: '${{ github.workspace }}\output'
      run: |
        # Compare the two DEBUGSYMBOLS.7z files
        # If they are equal (as they should be if only the installer was rebuilt), keep only one and remove the "PORTABLE/INSTALLER" suffix
        # If they are not equal, we have to keep both (but output a notice, as the CMake build should probably be tweaked to avoid this)
        if ((Get-FileHash -LiteralPath ".\debugsymbols\warzone2100_$($env:WZ_BUILD_DESC)_portable.DEBUGSYMBOLS.7z" -Algorithm SHA512).Hash -eq (Get-FileHash -LiteralPath ".\debugsymbols\warzone2100_$($env:WZ_BUILD_DESC)_installer.DEBUGSYMBOLS.7z" -Algorithm SHA512).Hash) {
          # The two archives' hashes match - delete one, and rename the other
          Write-Host "DEBUGSYMBOLS.7z files match"
          Remove-Item -LiteralPath ".\debugsymbols\warzone2100_$($env:WZ_BUILD_DESC)_installer.DEBUGSYMBOLS.7z" -Force -ErrorAction SilentlyContinue
          Rename-Item -LiteralPath ".\debugsymbols\warzone2100_$($env:WZ_BUILD_DESC)_portable.DEBUGSYMBOLS.7z" -NewName "warzone2100_$($env:WZ_BUILD_DESC).DEBUGSYMBOLS.7z"
        }
        else {
          Write-Warning "The DEBUGSYMBOLS.7z files for the portable + regular builds do not match. This may mean that the executable was rebuilt when switching portable / non-portable mode. (Check the CMake scripts to fix.)"
        }

        # Log hashes of the setup EXEs
        Write-Host "SHA512 Hashes:"
        Write-Host "`nwarzone2100_$($env:WZ_BUILD_DESC)_portable.exe`n`t-> SHA512: $((Get-FileHash -LiteralPath ".\portable\warzone2100_$($env:WZ_BUILD_DESC)_portable.exe" -Algorithm SHA512).Hash)`n`t`-> Size (bytes): $((Get-Item -LiteralPath ".\portable\warzone2100_$($env:WZ_BUILD_DESC)_portable.exe").Length)"
        Write-Host "`nwarzone2100_$($env:WZ_BUILD_DESC)_installer.exe`n`t-> SHA512: $((Get-FileHash -LiteralPath ".\installer\warzone2100_$($env:WZ_BUILD_DESC)_installer.exe" -Algorithm SHA512).Hash)`n`t`-> Size (bytes): $((Get-Item -LiteralPath ".\installer\warzone2100_$($env:WZ_BUILD_DESC)_installer.exe").Length)"
        Write-Host ""
    - name: Archive .ZIP of Regular build
      working-directory: '${{ github.workspace }}\build'
      run: |
        cpack -D CPACK_PACKAGE_FILE_NAME="warzone2100_archive" -D CPACK_INCLUDE_TOPLEVEL_DIRECTORY=OFF -D CPACK_ARCHIVE_COMPONENT_INSTALL=OFF -G ZIP -C "Release"
        # Rename the archive
        Move-Item -LiteralPath ".\warzone2100_archive.zip" -Destination "${{ github.workspace }}\output\archive\warzone2100_$($env:WZ_BUILD_DESC)_archive.zip"
    #####################################################
    # Upload build artifacts
    #####################################################
    - name: 'Upload Artifact - (Portable Build)'
      uses: actions/upload-artifact@v2
      if: success() && (github.repository == 'Warzone2100/warzone2100')
      with:
        name: warzone2100_win_${{ matrix.architecture }}_portable
        path: '${{ github.workspace }}\output\portable'
        if-no-files-found: 'error'
    - name: 'Upload Artifact - (Regular Installer)'
      uses: actions/upload-artifact@v2
      if: success() && (github.repository == 'Warzone2100/warzone2100')
      with:
        name: warzone2100_win_${{ matrix.architecture }}_installer
        path: '${{ github.workspace }}\output\installer'
        if-no-files-found: 'error'
    - name: 'Upload Artifact - (Debug Symbols)'
      uses: actions/upload-artifact@v2
      if: success() && (github.repository == 'Warzone2100/warzone2100')
      with:
        name: warzone2100_win_${{ matrix.architecture }}_DEBUGSYMBOLS
        path: '${{ github.workspace }}\output\debugsymbols'
        if-no-files-found: 'error'
    - name: 'Upload Artifact - (Archive)'
      uses: actions/upload-artifact@v2
      if: success() && startsWith(github.ref, 'refs/tags/') && (matrix.deploy_release == true) && (github.repository == 'Warzone2100/warzone2100')
      with:
        name: warzone2100_win_${{ matrix.architecture }}_archive
        path: '${{ github.workspace }}\output\archive'
        if-no-files-found: 'error'
    #####################################################
    # Upload Release assets (if a release tag)
    #####################################################
    - name: Upload Release Assets
      if: success() && startsWith(github.ref, 'refs/tags/') && (matrix.deploy_release == true) && (github.repository == 'Warzone2100/warzone2100')
      uses: past-due/action-gh-release@master
      with:
        # Do not explicitly specify a tag_name, so this action takes the github.ref and parses it for just the tag
        files: |
          ${{ github.workspace }}\output\portable\*.exe
          ${{ github.workspace }}\output\installer\*.exe
          ${{ github.workspace }}\output\debugsymbols\*.7z
          ${{ github.workspace }}\output\archive\*.zip
        draft: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  trigger-updates-json:
    # For this job to work, the following secrets must be set:
    # SITE_DISPATCH_ACCESS_TOKEN
    name: 'Trigger Info Update'
    runs-on: ubuntu-latest
    if: (github.repository == 'Warzone2100/warzone2100') && (github.ref == 'refs/heads/master')
    needs: windows-build
    steps:
      - name: 'Trigger updates.json update'
        run: |
          curl -X POST https://api.github.com/repos/Warzone2100/update-data/dispatches \
          -H 'Accept: application/vnd.github.everest-preview+json' \
          -u ${{ secrets.SITE_DISPATCH_ACCESS_TOKEN }} \
          --data '{"event_type": "development_build_update", "client_payload": { "repository": "'"$GITHUB_REPOSITORY"'" }}'
