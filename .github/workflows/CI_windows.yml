name: Windows

on:
  push:
    branches-ignore:
      - 'l10n_**' # Push events to translation service branches (that begin with "l10n_")
    # Sequence of patterns matched against refs/tags
    tags:
      - '*'
  pull_request:
    # Match all pull requests

jobs:
  windows-build:
    strategy:
      matrix:
        compiler: ["MSVC_2019"]
        architecture: ["x86"]
        ## NOTE: Unfortunately, 64-bit Windows builds are currently broken because of QScript (see: http://developer.wz2100.net/ticket/4763)
        ## Whenever that ticket is resolved, the following will build 64-bit as well:
        #architecture: ["x86", "x64"]
      fail-fast: false
    env:
      WZ_MSVC_VER: ${{ matrix.compiler }}
      WZ_TARGET_ARCH: ${{ matrix.architecture }}
      VSCMD_SKIP_SENDTELEMETRY: 1
    name: '${{ matrix.architecture }} [${{ matrix.compiler }}]'
    runs-on: windows-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        path: 'src'
    - name: Prepare Git Repo for autorevision
      working-directory: '${{ github.workspace }}\src'
      run: cmake -P .ci/githubactions/prepare_git_repo.cmake
    - name: Init Git Submodules
      working-directory: '${{ github.workspace }}\src'
      run: git submodule update --init --recursive
    # - name: Output Runner Environment Information
    #   run: |
    #     Write-Host "------------------------------------------------------"
    #     Write-Host "Environment Variables"
    #     Write-Host "------------------------------------------------------"
    #     & gci env:* | sort-object name
    - name: Install Asciidoctor
      run: gem install asciidoctor -v 2.0.10 --no-document
    - name: Install NSIS
      run: choco install nsis -y
    - name: Generate Settings for Run [${{ matrix.compiler }}:${{ matrix.architecture }}]
      id: settings
      run: |
        # Basic variable setup
        # --------------------

        $WZ_VC_TARGET_PLATFORMNAME = "$env:WZ_TARGET_ARCH"
        $WZ_BUILD_DESC = "win_${env:WZ_TARGET_ARCH}"

        if ($env:WZ_TARGET_ARCH -eq "x86") {
          $VCPKG_DEFAULT_TRIPLET = "x86-windows"
          $WZ_VC_TARGET_PLATFORMNAME = "Win32" # special case, map "x86" -> "Win32"
          # Qt packages and install location
          $QT5DIR = "5.9.9\msvc2015"
          $QTCI_ARCH = "win32_msvc2015"
        }
        elseif ($env:WZ_TARGET_ARCH -eq "x64") {
          $VCPKG_DEFAULT_TRIPLET = "x64-windows"
          # Qt packages and install location
          $QT5DIR = "5.9.9\msvc2017_64"
          $QTCI_ARCH = "win64_msvc2017_64"
        }
        $QTCI_PACKAGES = "qt.qt5.599.${QTCI_ARCH},qt.qt5.599.qtscript"

        # -------------
        # Qt DL Info

        ## For the offline installer (must correspond to the versioned QT5DIR / QTCI_PACKAGES above)
        $QT_DL_URL = "https://download.qt.io/archive/qt/5.9/5.9.9/qt-opensource-windows-x86-5.9.9.exe"
        $QT_DL_SHA512 = "F858F0892DF87CF7BF9CFC1EAE114CAC83C245EC363684D4ECE2337CC1A103EAD35BFCF9A3338DFD9C078C4D8D1B7A85FBE2924EB4E6754D10E660B22C635696"

        # ## For the online installer
        # $QT_DL_URL = "https://download.qt.io/official_releases/online_installers/qt-unified-windows-x86-online.exe"
        # $QT_DL_SHA512 = "" # Will cause the code signature to be checked

        # ------------------------------
        # MSVC version / generator info

        $WZ_VISUAL_STUDIO_INSTALL_PATH = ""
        if ($env:WZ_MSVC_VER -eq "MSVC_2019") {
          $WZ_VC_GENERATOR = "Visual Studio 16 2019"
          #$env:WZ_VC_TOOLCHAIN = "v142"
          # Get the installation path for a specific version of MSVC (2019)
          $WZ_VISUAL_STUDIO_INSTALL_PATH = & "vswhere.exe" -latest -property installationPath -version "[16.0,17.0)"
          if ($LastExitCode -ne 0)
          {
            echo "::warning ::Could not find MSVC 2019"
            $WZ_VISUAL_STUDIO_INSTALL_PATH = ""
          }
        }
        elseif ($env:WZ_MSVC_VER -eq "MSVC_2017") {
          $WZ_VC_GENERATOR = "Visual Studio 15 2017"
          #$env:WZ_VC_TOOLCHAIN = "v141"
          # Get the installation path for a specific version of MSVC (2017)
          $WZ_VISUAL_STUDIO_INSTALL_PATH = & "vswhere.exe" -latest -property installationPath -version "[15.0,16.0)"
          if ($LastExitCode -ne 0)
          {
            echo "::warning ::Could not find MSVC 2017"
            $WZ_VISUAL_STUDIO_INSTALL_PATH = ""
          }
        }

        if ([string]::IsNullOrWhitespace(${WZ_VISUAL_STUDIO_INSTALL_PATH}))
        {
          $WZ_VISUAL_STUDIO_INSTALL_PATH = & "vswhere.exe" -latest -property installationPath
          echo "::warning ::Default to 'latest' MSVC: `"${WZ_VISUAL_STUDIO_INSTALL_PATH}`""
        }

        $VCPKG_VISUAL_STUDIO_PATH = "${WZ_VISUAL_STUDIO_INSTALL_PATH}"
        #$CMAKE_GENERATOR_INSTANCE = "${WZ_VISUAL_STUDIO_INSTALL_PATH}"

        # -------------
        # Distributor

        $WZ_DISTRIBUTOR = "UNKNOWN"
        if (${env:GITHUB_REPOSITORY} -eq "Warzone2100/warzone2100") {
          $WZ_DISTRIBUTOR = "wz2100.net"
        }

        # ----------------
        # Determine which matrix combinations to deploy

        $WZ_DEPLOY_RELEASE = 'false'
        if ($env:WZ_MSVC_VER -eq "MSVC_2019") {
          if ($env:WZ_TARGET_ARCH -eq "x86") {
            $WZ_DEPLOY_RELEASE = 'true'
          }
        }

        # ----------------
        # Export Variables

        # Export everything important to environment variables (for future steps)
        echo "::set-env name=WZ_REPO_PATH::${{ github.workspace }}\src"
        echo "::set-env name=VCPKG_DEFAULT_TRIPLET::${VCPKG_DEFAULT_TRIPLET}"
        echo "::set-env name=WZ_VC_TARGET_PLATFORMNAME::${WZ_VC_TARGET_PLATFORMNAME}"
        echo "::set-env name=WZ_BUILD_DESC::${WZ_BUILD_DESC}"
        echo "::set-env name=QT5DIR::${QT5DIR}"
        echo "::set-env name=QTCI_ARCH::${QTCI_ARCH}"
        echo "::set-output name=QTCI_ARCH::${QTCI_ARCH}"
        echo "::set-env name=QTCI_PACKAGES::${QTCI_PACKAGES}"
        echo "::set-env name=QT_DL_URL::${QT_DL_URL}"
        echo "::set-env name=QT_DL_SHA512::${QT_DL_SHA512}"
        echo "::set-env name=WZ_VC_GENERATOR::${WZ_VC_GENERATOR}"
        #echo "::set-env name=WZ_VC_TOOLCHAIN::${WZ_VC_TOOLCHAIN}"
        echo "::set-env name=WZ_VISUAL_STUDIO_INSTALL_PATH::${WZ_VISUAL_STUDIO_INSTALL_PATH}"
        echo "::set-env name=VCPKG_VISUAL_STUDIO_PATH::${VCPKG_VISUAL_STUDIO_PATH}"
        echo "::set-env name=WZ_DISTRIBUTOR::${WZ_DISTRIBUTOR}"
        echo "::set-output name=WZ_DEPLOY_RELEASE::${WZ_DEPLOY_RELEASE}"
    - name: Check Environment for Qt Install
      env:
        QT_CI_LOGIN: ${{ secrets.QT_CI_LOGIN }}
        QT_CI_PASSWORD: ${{ secrets.QT_CI_PASSWORD }}
      run: |
        if ([string]::IsNullOrWhitespace(${env:QT_CI_LOGIN}))
        {
          # Looks like we don't have access to secrets - might be a pull request, fork, etc
          # So use an alternative method to download + install Qt
          echo "::set-env name=WZ_USE_ALT_QT_INSTALL_METHOD::true"
        }
    #####################################################
    # Standard Qt install method
    # - uses the official installers
    # - requires:
    #   - secrets.QT_CI_LOGIN
    #   - secrets.QT_CI_PASSWORD
    #####################################################
    - name: Download Qt
      if: env.WZ_USE_ALT_QT_INSTALL_METHOD != 'true'
      run: |
        Start-Sleep -Milliseconds 1 # See: https://stackoverflow.com/a/49859001

        $VerbosePreference = "Continue"
        . "${env:WZ_REPO_PATH}\.ci\powershell\request.ps1"

        $QT_DL_BASEDIR = "${{ github.workspace }}\dl"
        $QT_DL_PATH = "${QT_DL_BASEDIR}\qt-windows-installer.exe"
        New-Item -ItemType Directory -Force -Path "$QT_DL_BASEDIR"

        Write-Host "Original Url: `"${env:QT_DL_URL}`""
        $url = Get-RedirectedUrl "${env:QT_DL_URL}"
        Write-Host "Redirected Url: `"$url`""
        $req = Req -Params @{ 'Method'='GET';'Uri'="$url";'OutFile'="$QT_DL_PATH" } -Retries 3 -SecondsDelay 10

        if (![string]::IsNullOrWhitespace(${env:QT_DL_SHA512}))
        {
          $qt_exe_hash = Get-FileHash -Path "$QT_DL_PATH" -Algorithm SHA512
          If ($qt_exe_hash.Hash -eq ${env:QT_DL_SHA512}) {
            Write-Output "Verified downloaded Qt installer SHA512"
          } Else {
            Write-Error "The downloaded Qt installer hash `n`t'$($qt_exe_hash.Hash)'`ndoes not match the expected hash: `n`t'${env:QT_DL_SHA512}'"
          }
        }
        else
        {
          # If no hash was specified (for example, when using the "latest" online installer), check the Authenticode signature
          $signature = Get-AuthenticodeSignature -LiteralPath "$QT_DL_PATH"
          if ($signature.Status -ne "Valid")
          {
            # Failed to valid file signature
            Throw "The file's signature is invalid"
          }
          Write-Host "Authenticode Signature: Valid"
          $dnDict = ($signature.SignerCertificate.Subject -split ', ') |
                   foreach `
                       { $dnDict = @{} } `
                       { $item = $_.Split('='); $dnDict[$item[0]] = $item[1] } `
                       { $dnDict }
          $signer_common_name = $dnDict['CN'] #$signature.SignerCertificate.subject.split(',')[0].split('=')[1]
          Write-Host "Authenticode Signature SignerCertificate.Subject: $($dnDict | Out-String)"
          if ($signer_common_name -ne "The Qt Company Oy")
          {
            # Unexpected signing common name
            throw "The file's signature has an unexpected common name: `"$signer_common_name`""
          }
          Write-Host "SignerCertificate.Subject is as expected"
        }

        # Output Qt download path for next step
        echo "::set-env name=QT_DL_PATH::${QT_DL_PATH}"
    - name: Install Qt
      if: env.WZ_USE_ALT_QT_INSTALL_METHOD != 'true'
      env:
        QT_CI_LOGIN: ${{ secrets.QT_CI_LOGIN }}
        QT_CI_PASSWORD: ${{ secrets.QT_CI_PASSWORD }}
      run: |
        # Try to run the Qt installer, passing the unattended installation script
        try {
          $QT_INSTALL_ROOT = "C:\Qt" #"${{ github.workspace }}\Qt"
          Write-Host "------------------------------------------------------"
          Write-Host "Running Qt installer... (this may take a little while)"
          Write-Host "env:QT_DL_PATH=`"${env:QT_DL_PATH}`""
          Write-Host "------------------------------------------------------"
          $proc = Start-Process "${env:QT_DL_PATH}" -ArgumentList "--verbose","--script","${env:WZ_REPO_PATH}\.ci\install_scripts\qt-install.qs","QTCI_OUTPUT=`"${QT_INSTALL_ROOT}`"","QTCI_PACKAGES=${env:QTCI_PACKAGES}" -PassThru -NoNewWindow
          # Wait up to 30 minutes (specified in seconds) for normal termination
          $timeouted = $null
          $proc | Wait-Process -Timeout 1800 -ErrorAction SilentlyContinue -ErrorVariable timeouted
          if ($timeouted)
          {
              # terminate the process
              $proc | kill
              # throw an error
              Throw "Qt installer reached timeout - did not complete / exit; forcefully terminated"
          }
          if ($proc.ExitCode -ne 0)
          {
            Throw "$($proc.ExitCode)"
          }
        } catch {
            # $_ returns the error details
            Write-Error "qt-windows-installer.exe returned the following error: $_"
            Throw "Aborted qt-windows-installer.exe returned: $_"
        }
        Write-Host "------------------------------------------------------"
        Write-Host "Qt installer seems to have completed..."
        # Clean-up the installer exe
        Remove-Item "${env:QT_DL_PATH}"
        # Output install path for following steps
        echo "::set-env name=QT_INSTALL_ROOT::${QT_INSTALL_ROOT}"
    - name: Verify Qt version
      if: env.WZ_USE_ALT_QT_INSTALL_METHOD != 'true'
      run: |
        Write-Host "Qt version:"
        & "${env:QT_INSTALL_ROOT}\${env:QT5DIR}\bin\qmake" -version

        # Add the QT5 \bin dir to PATH (for future steps)
        Write-Host "Adding Qt bin folder to PATH: `"${env:QT_INSTALL_ROOT}\${env:QT5DIR}\bin`""
        echo "::add-path::${env:QT_INSTALL_ROOT}\${env:QT5DIR}\bin"
    #####################################################
    # Alternative Qt Install method
    # - relies on external action that uses unofficial
    #   download / installation scripts
    #####################################################
    - name: Install Qt (Alt Method)
      if: env.WZ_USE_ALT_QT_INSTALL_METHOD == 'true'
      uses: jurplel/install-qt-action@v2.6.2
      with:
        version: 5.9.9
        arch: ${{ steps.settings.outputs.QTCI_ARCH }}
        dir: 'C:/Qt'
        modules: qtscript
    - name: Verify Qt install + version (Alt Method)
      if: env.WZ_USE_ALT_QT_INSTALL_METHOD == 'true'
      run: |
        Write-Host "Qt version:"
        & "qmake" -version
    #####################################################
    - name: Create directories
      run: |
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\build"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\output"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\output\portable"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\output\installer"
        New-Item -ItemType Directory -Force -Path "${{ github.workspace }}\output\debugsymbols"
    - name: Build vcpkg + dependencies
      working-directory: '${{ github.workspace }}\build'
      run: |
        Write-Host "env:VCPKG_DEFAULT_TRIPLET=`"${env:VCPKG_DEFAULT_TRIPLET}`""
        Write-Host "env:VCPKG_VISUAL_STUDIO_PATH=`"${env:VCPKG_VISUAL_STUDIO_PATH}`""

        & ${env:WZ_REPO_PATH}\get-dependencies_win.ps1 -VCPKG_BUILD_TYPE "release"

        # Remove the vcpkg\buildtrees folder. (Once all dependencies are installed, it isn't needed, and it takes up a lot of space in the cache.)
        if (Test-Path .\vcpkg\buildtrees) { Remove-Item .\vcpkg\buildtrees -Force -Recurse -ErrorAction SilentlyContinue; }

        # Clean the build remnants of vcpkg itself. (Since it's rebuilt fresh - even from a cached vcpkg directory - these aren't needed.)
        . "${env:WZ_REPO_PATH}\.ci\powershell\importVCvars.ps1"
        Import-VCVarsEnv "${env:WZ_VISUAL_STUDIO_INSTALL_PATH}" "-arch=${env:WZ_TARGET_ARCH} -host_arch=x64"
        msbuild .\vcpkg\toolsrc\vcpkg.sln /t:Clean /p:Configuration=Release /p:Platform=x86
    - name: CMake Configure (Portable Build)
      working-directory: '${{ github.workspace }}\build'
      run: |
        # Use CMake to configure with the appropriate Visual Studio (MSBUILD) generator, toolchain, and target platform (portable build)
        cmake -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\build\vcpkg\scripts\buildsystems\vcpkg.cmake" -DWZ_PORTABLE:BOOL=ON -DCPACK_PACKAGE_FILE_NAME:STRING="warzone2100_portable" -DWZ_DISTRIBUTOR:STRING="${env:WZ_DISTRIBUTOR}" -DCMAKE_GENERATOR_INSTANCE="${env:WZ_VISUAL_STUDIO_INSTALL_PATH}" -G "${env:WZ_VC_GENERATOR}" -A "${env:WZ_VC_TARGET_PLATFORMNAME}" "${env:WZ_REPO_PATH}"
    - name: CMake Build (Portable Build)
      run: |
        & cmake --build build --config Release --target package -- /m
        # Rename the portable installer
        Move-Item -LiteralPath ".\build\warzone2100_portable.exe" -Destination ".\output\portable\warzone2100_$($env:WZ_BUILD_DESC)_portable.exe"
        # Package the portable .pdb and .sym files into a "DEBUGSYMBOLS" .7z archive (do not include metadata / timestamps)
        cmd /c 7z a -t7z -m0=lzma -mx=9 -mtc=off -mtm=off -mta=off ".\output\debugsymbols\warzone2100_$($env:WZ_BUILD_DESC)_portable.DEBUGSYMBOLS.7z" "$($pwd)\build\src\*.pdb" "$($pwd)\build\src\*.sym"
    - name: CMake Configure (Regular Installer)
      working-directory: '${{ github.workspace }}\build'
      run: |
        # Re-run CMake configure for non-portable (regular) installer
        cmake -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\build\vcpkg\scripts\buildsystems\vcpkg.cmake" -DWZ_PORTABLE:BOOL=OFF -DCPACK_PACKAGE_FILE_NAME:STRING="warzone2100_installer" -DWZ_DISTRIBUTOR:STRING="${env:WZ_DISTRIBUTOR}" -DCMAKE_GENERATOR_INSTANCE="${env:WZ_VISUAL_STUDIO_INSTALL_PATH}" -G "${env:WZ_VC_GENERATOR}" -A "${env:WZ_VC_TARGET_PLATFORMNAME}" "${env:WZ_REPO_PATH}"
    - name: CMake Build (Regular Installer)
      run: |
        & cmake --build build --config Release --target package
        # Rename the regular installer
        Move-Item -LiteralPath ".\build\warzone2100_installer.exe" -Destination ".\output\installer\warzone2100_$($env:WZ_BUILD_DESC)_installer.exe"
        # Package the portable .pdb and .sym files into a "DEBUGSYMBOLS" .7z archive (do not include metadata / timestamps)
        cmd /c 7z a -t7z -m0=lzma -mx=9 -mtc=off -mtm=off -mta=off ".\output\debugsymbols\warzone2100_$($env:WZ_BUILD_DESC)_installer.DEBUGSYMBOLS.7z" "$($pwd)\build\src\*.pdb" "$($pwd)\build\src\*.sym"
    - name: Compare Build Outputs
      working-directory: '${{ github.workspace }}\output'
      run: |
        # Compare the two DEBUGSYMBOLS.7z files
        # If they are equal (as they should be if only the installer was rebuilt), keep only one and remove the "PORTABLE/INSTALLER" suffix
        # If they are not equal, we have to keep both (but output a notice, as the CMake build should probably be tweaked to avoid this)
        if ((Get-FileHash -LiteralPath ".\debugsymbols\warzone2100_$($env:WZ_BUILD_DESC)_portable.DEBUGSYMBOLS.7z" -Algorithm SHA512).Hash -eq (Get-FileHash -LiteralPath ".\debugsymbols\warzone2100_$($env:WZ_BUILD_DESC)_installer.DEBUGSYMBOLS.7z" -Algorithm SHA512).Hash) {
          # The two archives' hashes match - delete one, and rename the other
          Write-Host "DEBUGSYMBOLS.7z files match"
          Remove-Item -LiteralPath ".\debugsymbols\warzone2100_$($env:WZ_BUILD_DESC)_installer.DEBUGSYMBOLS.7z" -Force -ErrorAction SilentlyContinue
          Rename-Item -LiteralPath ".\debugsymbols\warzone2100_$($env:WZ_BUILD_DESC)_portable.DEBUGSYMBOLS.7z" -NewName "warzone2100_$($env:WZ_BUILD_DESC).DEBUGSYMBOLS.7z"
        }
        else {
          Write-Warning "The DEBUGSYMBOLS.7z files for the portable + regular builds do not match. This may mean that the executable was rebuilt when switching portable / non-portable mode. (Check the CMake scripts to fix.)"
        }

        # Log hashes of the setup EXEs
        Write-Host "SHA512 Hashes:"
        Write-Host "`nwarzone2100_$($env:WZ_BUILD_DESC)_portable.exe`n`t-> SHA512: $((Get-FileHash -LiteralPath ".\portable\warzone2100_$($env:WZ_BUILD_DESC)_portable.exe" -Algorithm SHA512).Hash)`n`t`-> Size (bytes): $((Get-Item -LiteralPath ".\portable\warzone2100_$($env:WZ_BUILD_DESC)_portable.exe").Length)"
        Write-Host "`nwarzone2100_$($env:WZ_BUILD_DESC)_installer.exe`n`t-> SHA512: $((Get-FileHash -LiteralPath ".\installer\warzone2100_$($env:WZ_BUILD_DESC)_installer.exe" -Algorithm SHA512).Hash)`n`t`-> Size (bytes): $((Get-Item -LiteralPath ".\installer\warzone2100_$($env:WZ_BUILD_DESC)_installer.exe").Length)"
        Write-Host ""
    #####################################################
    # Upload build artifacts
    #####################################################
    - name: 'Upload Artifact - (Portable Build)'
      uses: actions/upload-artifact@v1
      if: success() && (github.repository == 'Warzone2100/warzone2100')
      with:
        name: warzone2100_win_${{ matrix.architecture }}_portable
        path: '${{ github.workspace }}\output\portable'
    - name: 'Upload Artifact - (Regular Installer)'
      uses: actions/upload-artifact@v1
      if: success() && (github.repository == 'Warzone2100/warzone2100')
      with:
        name: warzone2100_win_${{ matrix.architecture }}_installer
        path: '${{ github.workspace }}\output\installer'
    - name: 'Upload Artifact - (Debug Symbols)'
      uses: actions/upload-artifact@v1
      if: success() && (github.repository == 'Warzone2100/warzone2100')
      with:
        name: warzone2100_win_${{ matrix.architecture }}_DEBUGSYMBOLS
        path: '${{ github.workspace }}\output\debugsymbols'
    #####################################################
    # Upload Release assets (if a release tag)
    #####################################################
    - name: Upload Release Assets
      if: startsWith(github.ref, 'refs/tags/') && (steps.settings.outputs.WZ_DEPLOY_RELEASE == 'true') && (github.repository == 'Warzone2100/warzone2100')
      uses: past-due/action-gh-release@v1
      with:
        # Do not explicitly specify a tag_name, so this action takes the github.ref and parses it for just the tag
        files: |
          ${{ github.workspace }}\output\portable\*.exe
          ${{ github.workspace }}\output\installer\*.exe
          ${{ github.workspace }}\output\debugsymbols\*.7z
        draft: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  trigger-updates-json:
    # For this job to work, the following secrets must be set:
    # SITE_DISPATCH_ACCESS_TOKEN
    name: 'Trigger Info Update'
    runs-on: ubuntu-latest
    if: (github.repository == 'Warzone2100/warzone2100') && (github.ref == 'refs/heads/master')
    needs: windows-build
    steps:
      - name: 'Trigger updates.json update'
        run: |
          curl -X POST https://api.github.com/repos/Warzone2100/update-data/dispatches \
          -H 'Accept: application/vnd.github.everest-preview+json' \
          -u ${{ secrets.SITE_DISPATCH_ACCESS_TOKEN }} \
          --data '{"event_type": "development_build_update", "client_payload": { "repository": "'"$GITHUB_REPOSITORY"'" }}'
