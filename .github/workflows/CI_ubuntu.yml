name: Ubuntu

on:
  push:
    branches-ignore:
      - 'l10n_**' # Push events to translation service branches (that begin with "l10n_")
    # Sequence of patterns matched against refs/tags
    tags:
      - '*'
  pull_request:
    # Match all pull requests

jobs:
  ubuntu-16-04-gcc:
    name: Ubuntu 16.04 (CMake) [GCC]
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Prepare Git Repo for autorevision
      run: cmake -P .ci/githubactions/prepare_git_repo.cmake
    - name: Init Git Submodules
      run: git submodule update --init --recursive
    - name: Debug Output
      run: |
        echo "GITHUB_REF=${GITHUB_REF}"
        echo "GITHUB_HEAD_REF=${GITHUB_HEAD_REF}"
    - name: Build the Docker image
      run: |
        docker build -f docker/ubuntu-16.04/Dockerfile -t ubuntu .
    - name: CMake Configure
      run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWZ_ENABLE_WARNINGS:BOOL=ON -G"Ninja"
    - name: CMake Build
      run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake --build build

  ubuntu-gcc-build-and-package:
    strategy:
      matrix:
        include:
          - name: "Ubuntu 18.04 (CMake) [GCC]"
            docker: "ubuntu-18.04"
            arch: "amd64"
            output-suffix: "ubuntu18.04"
          - name: "Ubuntu 20.04 (CMake) [GCC]"
            docker: "ubuntu-20.04"
            arch: "amd64"
            output-suffix: "ubuntu20.04"
      fail-fast: false
    name: '${{ matrix.name }}'
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Prepare Git Repo for autorevision
      run: cmake -P .ci/githubactions/prepare_git_repo.cmake
    - name: Init Git Submodules
      run: git submodule update --init --recursive
    - name: Build the Docker image
      run: |
        docker build -f docker/${{ matrix.docker }}/Dockerfile -t ubuntu .
    - name: Compute build variables
      run: |
        . .ci/githubactions/export_build_output_desc.sh
        echo "WZ_BUILD_DESC_IS_TAG=${WZ_BUILD_DESC_IS_TAG}" >> $GITHUB_ENV
        echo "WZ_BUILD_DESC_PREFIX=${WZ_BUILD_DESC_PREFIX}" >> $GITHUB_ENV
        WZ_OUTPUT_NAME_SUFFIX=""
        WZ_NAME_SUFFIX=""
        if [ "$WZ_BUILD_DESC_IS_TAG" == "false" ]; then
          WZ_OUTPUT_NAME_SUFFIX="_$(echo "${WZ_BUILD_DESC_PREFIX}" | sed 's/[^a-zA-Z0-9\.]/_/g')"
          WZ_NAME_SUFFIX=" ($(echo "${WZ_BUILD_DESC_PREFIX}" | sed 's/[^a-zA-Z0-9\.]/_/g'))"
        fi
        echo "WZ_OUTPUT_NAME_SUFFIX=${WZ_OUTPUT_NAME_SUFFIX}"
        echo "WZ_OUTPUT_NAME_SUFFIX=${WZ_OUTPUT_NAME_SUFFIX}" >> $GITHUB_ENV
        echo "WZ_NAME_SUFFIX=${WZ_NAME_SUFFIX}" >> $GITHUB_ENV

        WZ_DISTRIBUTOR="UNKNOWN"
        if [ "${GITHUB_REPOSITORY}" == "Warzone2100/warzone2100" ]; then
          WZ_DISTRIBUTOR="wz2100.net"
        fi
        echo "WZ_DISTRIBUTOR=${WZ_DISTRIBUTOR}"
        echo "WZ_DISTRIBUTOR=${WZ_DISTRIBUTOR}" >> $GITHUB_ENV
    - name: CMake Configure
      run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=Release -DWZ_ENABLE_WARNINGS:BOOL=ON -DWZ_DISTRIBUTOR:STRING="${WZ_DISTRIBUTOR}" -DWZ_OUTPUT_NAME_SUFFIX="${WZ_OUTPUT_NAME_SUFFIX}" -DWZ_NAME_SUFFIX="${WZ_NAME_SUFFIX}" -G"Ninja"
    - name: CMake Build
      run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake --build build
    - name: Package .DEB
      run: |
        WZ_PACKAGE_VAR_OVERRIDES=""
        WZ_SHORT_SHA=$(echo "${GITHUB_SHA}" | head -c 7)
        if [ "$WZ_BUILD_DESC_IS_TAG" == "false" ]; then
          DEB_VERSION_SAFE_DESC_PREFIX=$(echo "${WZ_BUILD_DESC_PREFIX}" | sed 's/[^a-zA-Z0-9]/~/g')
          WZ_PACKAGE_VAR_OVERRIDES="-D CPACK_DEBIAN_PACKAGE_VERSION=1.${DEB_VERSION_SAFE_DESC_PREFIX}.${WZ_SHORT_SHA} -D WZ_DEVELOPMENT_BUILD=ON"
        fi
        WZ_DEB_PACKAGE_NAME=$(echo "warzone2100${WZ_OUTPUT_NAME_SUFFIX}" | sed 's/[^a-zA-Z0-9\.\+\-]/-/g')
        docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cpack --config "build/CPackConfig.cmake" -G DEB -D CPACK_DEBIAN_PACKAGE_MAINTAINER="${WZ_DISTRIBUTOR}" -D CPACK_DEB_COMPONENT_INSTALL=OFF -D CPACK_MONOLITHIC_INSTALL=1 -D CPACK_DEBIAN_PACKAGE_NAME="${WZ_DEB_PACKAGE_NAME}" -D CPACK_DEBIAN_FILE_NAME="warzone2100.deb" ${WZ_PACKAGE_VAR_OVERRIDES}
        OUTPUT_DIR="${HOME}/output"
        echo "OUTPUT_DIR=${OUTPUT_DIR}"
        echo "OUTPUT_DIR=${OUTPUT_DIR}" >> $GITHUB_ENV
        mkdir -p "${OUTPUT_DIR}"
        OUTPUT_FILE_NAME="warzone2100_${{ matrix.output-suffix }}_${{ matrix.arch }}.deb"
        cp "warzone2100.deb" "${OUTPUT_DIR}/${OUTPUT_FILE_NAME}"
        echo "Generated .deb: \"${OUTPUT_FILE_NAME}\""
        echo "  -> SHA512: $(sha512sum "${OUTPUT_DIR}/${OUTPUT_FILE_NAME}")"
        echo "  -> Size (bytes): $(stat -c %s "${OUTPUT_DIR}/${OUTPUT_FILE_NAME}")"
        echo "WZ_FULL_OUTPUT_DEB_PATH=${OUTPUT_DIR}/${OUTPUT_FILE_NAME}" >> $GITHUB_ENV
    - uses: actions/upload-artifact@v2
      if: success()
      with:
        name: "warzone2100_${{ matrix.output-suffix }}_${{ matrix.arch }}_deb"
        path: ${{ env.OUTPUT_DIR }}
        if-no-files-found: 'error'
    - name: Upload artifact to release
      if: success() && startsWith(github.ref, 'refs/tags/')
      uses: past-due/action-gh-release@master
      with:
        # Do not explicitly specify a tag_name, so this action takes the github.ref and parses it for just the tag
        files: ${{ env.WZ_FULL_OUTPUT_DEB_PATH }}
        draft: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  package-source:
    name: Package Source (Ubuntu 18.04, CMake) [GCC]
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Prepare Git Repo for autorevision
      run: cmake -P .ci/githubactions/prepare_git_repo.cmake
    - name: Init Git Submodules
      run: git submodule update --init --recursive
    - name: Build the Docker image
      run: |
        docker build -f docker/ubuntu-18.04/Dockerfile -t ubuntu .
    - name: CMake Configure
      run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=Debug -G"Ninja"
    - name: CMake Package Source
      run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake --build build --target package_source
    - name: Extract & Build Packaged Source
      run: |
        # Extract the .tar.xz into a new location
        mkdir extracted && tar -xf build/warzone2100.tar.xz -C extracted
        # Attempt a build from the tarball source (using CMake)
        docker run --rm -e MAKEFLAGS -v $(pwd)/extracted/warzone2100:/code ubuntu cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWZ_ENABLE_WARNINGS:BOOL=ON -G"Ninja"
        docker run --rm -e MAKEFLAGS -v $(pwd)/extracted/warzone2100:/code ubuntu cmake --build build
    - name: Rename Tarball & Output Info
      run: |
        OUTPUT_DIR="${HOME}/output"
        echo "OUTPUT_DIR=${OUTPUT_DIR}"
        echo "OUTPUT_DIR=${OUTPUT_DIR}" >> $GITHUB_ENV
        mkdir -p "${OUTPUT_DIR}"
        cp "build/warzone2100.tar.xz" "${OUTPUT_DIR}/warzone2100_src.tar.xz"
        echo "Generated warzone2100 tarball: \"warzone2100_src.tar.xz\""
        echo "  -> SHA512: $(sha512sum "${OUTPUT_DIR}/warzone2100_src.tar.xz")"
        echo "  -> Size (bytes): $(stat -c %s "${OUTPUT_DIR}/warzone2100_src.tar.xz")"
    - uses: actions/upload-artifact@v2
      if: success()
      with:
        name: warzone2100_src
        path: ${{ env.OUTPUT_DIR }}
        if-no-files-found: 'error'

  ubuntu-18-04-clang:
    name: Ubuntu 18.04 (CMake) [Clang]
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Prepare Git Repo for autorevision
      run: cmake -P .ci/githubactions/prepare_git_repo.cmake
    - name: Init Git Submodules
      run: git submodule update --init --recursive
    - name: Build the Docker image
      run: |
        docker build -f docker/ubuntu-18.04/Dockerfile -t ubuntu .
    - name: CMake Configure
      run: docker run --rm -e "CC=/usr/bin/clang" -e "CXX=/usr/bin/clang++" -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWZ_ENABLE_WARNINGS:BOOL=ON -G"Ninja"
    - name: CMake Build
      run: docker run --rm -e "CC=/usr/bin/clang" -e "CXX=/usr/bin/clang++" -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake --build build

  # ubuntu-20-04-gcc:
  #   name: Ubuntu 20.04 (CMake) [GCC]
  #   runs-on: ubuntu-latest
  #   if: "!contains(github.event.head_commit.message, '[ci skip]')"
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0
  #   - name: Prepare Git Repo for autorevision
  #     run: cmake -P .ci/githubactions/prepare_git_repo.cmake
  #   - name: Init Git Submodules
  #     run: git submodule update --init --recursive
  #   - name: Build the Docker image
  #     run: |
  #       docker build -f docker/ubuntu-20.04/Dockerfile -t ubuntu .
  #   - name: CMake Configure
  #     run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWZ_ENABLE_WARNINGS:BOOL=ON -G"Ninja"
  #   - name: CMake Build
  #     run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake --build build

  ubuntu-20-04-clang:
    name: Ubuntu 20.04 (CMake) [Clang]
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Prepare Git Repo for autorevision
      run: cmake -P .ci/githubactions/prepare_git_repo.cmake
    - name: Init Git Submodules
      run: git submodule update --init --recursive
    - name: Build the Docker image
      run: |
        docker build -f docker/ubuntu-20.04/Dockerfile -t ubuntu .
    - name: CMake Configure
      run: docker run --rm -e "CC=/usr/bin/clang" -e "CXX=/usr/bin/clang++" -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWZ_ENABLE_WARNINGS:BOOL=ON -G"Ninja"
    - name: CMake Build
      run: docker run --rm -e "CC=/usr/bin/clang" -e "CXX=/usr/bin/clang++" -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake --build build

  # # NOTE: This uses qemu, and is much slower than a native ARM64 build
  # ubuntu-20-04-gcc-arm64:
  #   name: Ubuntu 20.04 (CMake) [GCC] [ARM64]
  #   runs-on: ubuntu-latest
  #   if: "!contains(github.event.head_commit.message, '[ci skip]')"
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0
  #   - name: Prepare Git Repo for autorevision
  #     run: cmake -P .ci/githubactions/prepare_git_repo.cmake
  #   - name: Init Git Submodules
  #     run: git submodule update --init --recursive
  #   - name: Prep for multi-arch
  #     run: |
  #       sudo apt-get -u update && DEBIAN_FRONTEND=noninteractive sudo apt-get -y install qemu qemu-user-static
  #       docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  #   - name: Build the Docker image
  #     run: |
  #       docker build -f docker/ubuntu-20.04/Dockerfile.arm64 -t ubuntu .
  #   - name: CMake Configure
  #     run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWZ_ENABLE_WARNINGS:BOOL=ON -G"Ninja"
  #   - name: CMake Build
  #     run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake --build build

  upload_release_artifacts:
    if: startsWith(github.ref, 'refs/tags/')
    name: Upload Release Artifacts
    needs: package-source
    runs-on: ubuntu-latest
    steps:
      - name: Download source tarball
        uses: actions/download-artifact@v2
        with:
          name: warzone2100_src
          path: warzone2100_src
      - name: Upload source tarball to release
        uses: past-due/action-gh-release@master
        with:
          # Do not explicitly specify a tag_name, so this action takes the github.ref and parses it for just the tag
          files: ./warzone2100_src/warzone2100_src.tar.xz
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
