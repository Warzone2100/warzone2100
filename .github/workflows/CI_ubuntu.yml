name: Ubuntu

on: 
  push:
    branches-ignore:
      - 'l10n_**' # Push events to translation service branches (that begin with "l10n_")
  pull_request:
    # Match all pull requests

jobs:
  ubuntu-16-04-gcc:
    name: Ubuntu 16.04 (CMake) [GCC]
    runs-on: ubuntu-16.04
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Prepare Git Repo for autorevision
      run: cmake -P .ci/githubactions/prepare_git_repo.cmake
    - name: Init Git Submodules
      run: git submodule update --init --recursive
    - name: Debug Output
      run: |
        echo "GITHUB_REF=${GITHUB_REF}"
        echo "GITHUB_HEAD_REF=${GITHUB_HEAD_REF}"
    - name: Build the Docker image
      run: |
        cd docker/ubuntu-16.04/
        docker build -t ubuntu .
        cd ../..
    - name: CMake Configure
      run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWZ_ENABLE_WARNINGS:BOOL=ON -G"Ninja"
    - name: CMake Build
      run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake --build build

  ubuntu-18-04-gcc:
    name: Ubuntu 18.04 (CMake) [GCC]
    runs-on: ubuntu-18.04
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Prepare Git Repo for autorevision
      run: cmake -P .ci/githubactions/prepare_git_repo.cmake
    - name: Init Git Submodules
      run: git submodule update --init --recursive
    - name: Build the Docker image
      run: |
        cd docker/ubuntu-18.04/
        docker build -t ubuntu .
        cd ../..
    - name: CMake Configure
      run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWZ_ENABLE_WARNINGS:BOOL=ON -G"Ninja"
    - name: CMake Build
      run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake --build build

  package-source:
    name: Package Source (Ubuntu 18.04, CMake) [GCC]
    runs-on: ubuntu-18.04
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Prepare Git Repo for autorevision
      run: cmake -P .ci/githubactions/prepare_git_repo.cmake
    - name: Init Git Submodules
      run: git submodule update --init --recursive
    - name: Build the Docker image
      run: |
        cd docker/ubuntu-18.04/
        docker build -t ubuntu .
        cd ../..
    - name: CMake Configure
      run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=Debug -G"Ninja"
    - name: CMake Package Source
      run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake --build build --target package_source
    - name: Extract & Build Packaged Source
      run: |
        # Extract the .tar.xz into a new location
        mkdir extracted && tar -xf build/warzone2100.tar.xz -C extracted
        # Attempt a build from the tarball source (using CMake)
        docker run --rm -e MAKEFLAGS -v $(pwd)/extracted/warzone2100:/code ubuntu cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWZ_ENABLE_WARNINGS:BOOL=ON -G"Ninja"
        docker run --rm -e MAKEFLAGS -v $(pwd)/extracted/warzone2100:/code ubuntu cmake --build build
    - name: Rename Tarball & Output Info
      run: |
        OUTPUT_DIR="${HOME}/output"
        echo "OUTPUT_DIR=${OUTPUT_DIR}"
        echo "::set-env name=OUTPUT_DIR::${OUTPUT_DIR}"
        mkdir -p "${OUTPUT_DIR}"
        cp "build/warzone2100.tar.xz" "${OUTPUT_DIR}/warzone2100_src.tar.xz"
        echo "Generated warzone2100 tarball: \"warzone2100_src.tar.xz\""
        echo "  -> SHA512: $(sha512sum "${OUTPUT_DIR}/warzone2100_src.tar.xz")"
        echo "  -> Size (bytes): $(stat -c %s "${OUTPUT_DIR}/warzone2100_src.tar.xz")"
    - uses: actions/upload-artifact@v1
      if: success()
      with:
        name: warzone2100_src
        path: ${{ env.OUTPUT_DIR }}

  ubuntu-18-04-clang:
    name: Ubuntu 18.04 (CMake) [Clang]
    runs-on: ubuntu-18.04
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Prepare Git Repo for autorevision
      run: cmake -P .ci/githubactions/prepare_git_repo.cmake
    - name: Init Git Submodules
      run: git submodule update --init --recursive
    - name: Build the Docker image
      run: |
        cd docker/ubuntu-18.04-clang/
        docker build -t ubuntu .
        cd ../..
    - name: CMake Configure
      run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake '-H.' -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWZ_ENABLE_WARNINGS:BOOL=ON -G"Ninja"
    - name: CMake Build
      run: docker run --rm -e "CI=true" -e GITHUB_WORKFLOW -e GITHUB_ACTIONS -e GITHUB_REPOSITORY -e "GITHUB_WORKSPACE=/code" -e GITHUB_SHA -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e MAKEFLAGS -v $(pwd):/code ubuntu cmake --build build

  upload_release_artifacts:
    if: startsWith(github.ref, 'refs/tags/')
    name: Upload Release Artifacts
    needs: package-source
    runs-on: ubuntu-latest
    steps:
      - name: Download source tarball
        uses: actions/download-artifact@v1
        with:
          name: warzone2100_src
      - name: Upload source tarball to release
        uses: past-due/action-gh-release@v1
        with:
          # Do not explicitly specify a tag_name, so this action takes the github.ref and parses it for just the tag
          files: ./warzone2100_src/warzone2100_src.tar.xz
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
