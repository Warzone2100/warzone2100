# Template for WZ macOS builds
#
# For more information see:
# Xcode task: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/xcode?view=azure-devops
#

parameters:
# defaults for any parameters that aren't specified
- name: name
  default: ''
- name: displayName
  default: ''
- name: vmImage
  default: ''
- name: xcodeDeveloperDir
  default: 'default'
- name: publishArtifact
  type: boolean
  default: false
- name: artifact
  default: 'warzone2100_macOS'
- name: uploadArtifactToGitHubReleases
  type: boolean
  default: false
- name: gitHubConnection
  default: ''

jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.displayName }}  # friendly name to display in the UI
  continueOnError: true  # 'true' if future jobs should run even if this job fails; defaults to 'false'
  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    MACOSX_DEPLOYMENT_TARGET: 10.10
    DESIRED_XCODE_DEV_DIR: ${{ parameters.xcodeDeveloperDir }}

  steps:
  - template: prepare-repo-steps.yml
  - task: CmdLine@2
    displayName: Compute additional variables
    # See: "Build.SourceBranchName does not include full name, if name includes forward slash"
    # - Link: https://github.com/microsoft/azure-pipelines-agent/issues/838
    # Also see: https://medium.com/microsoftazure/how-to-pass-variables-in-azure-pipelines-yaml-tasks-5c81c5d31763
    inputs:
      script: |
        FULL_SOURCE_BRANCH_NAME=$(echo ${BUILD_SOURCEBRANCHNAME} | sed 's/refs\/[^\/]*\///')
        echo "FULL_SOURCE_BRANCH_NAME=${FULL_SOURCE_BRANCH_NAME}"
        echo "##vso[task.setvariable variable=FULL_SOURCE_BRANCH_NAME]$FULL_SOURCE_BRANCH_NAME"
  - task: CmdLine@2
    displayName: Install pre-reqs
    inputs:
      script: |
        brew install gettext
        # NOTE: Specify an explicit Asciidoctor version to help ensure reproducible builds
        gem install asciidoctor -v 2.0.10 --no-document
        cmake --version
  - task: CmdLine@2
    displayName: configure_mac.cmake
    inputs:
      script: |
        echo "MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}"
        echo "BUILD_DEFINITIONNAME=${BUILD_DEFINITIONNAME}"
        echo "AGENT_BUILDDIRECTORY=${AGENT_BUILDDIRECTORY}"

        cd "${AGENT_BUILDDIRECTORY}"

        # Delete any prior build dir, create a fresh one
        rm -rf build
        if [ ! -d "build" ]; then
        	mkdir build
        fi

        # configure_mac.cmake (gets dependencies, configures CMake)
        cd build
        WZ_DISTRIBUTOR="UNKNOWN"
        if [ "${BUILD_DEFINITIONNAME}" == "Warzone2100.warzone2100" ]; then
        	# Building from main repo - set distributor
        	WZ_DISTRIBUTOR="wz2100.net"
        fi

        echo "Current directory: $(pwd)"
        ADDITIONAL_CONFIGURE_ARGS=""
        if [ "${DESIRED_XCODE_DEV_DIR}" != "default" ]; then
          # Need to run configure_mac script twice

          echo "Run configure_mac to just build vcpkg (with system default Xcode)"
          ADDITIONAL_CONFIGURE_ARGS="-DONLY_BUILD_VCPKG=true"
          echo "cmake ${ADDITIONAL_CONFIGURE_ARGS} -DVCPKG_BUILD_TYPE=release -DWZ_DISTRIBUTOR:STRING=\"${WZ_DISTRIBUTOR}\" -DADDITIONAL_CMAKE_ARGUMENTS=\"-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY=;-DCODE_SIGN_INJECT_BASE_ENTITLEMENTS=NO\" -P ../configure_mac.cmake"
          cmake ${ADDITIONAL_CONFIGURE_ARGS} -DVCPKG_BUILD_TYPE=release -DWZ_DISTRIBUTOR:STRING="${WZ_DISTRIBUTOR}" -DADDITIONAL_CMAKE_ARGUMENTS="-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY=;-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_INJECT_BASE_ENTITLEMENTS=NO" -P ../src/configure_mac.cmake

          echo "Switching Xcode: ${DESIRED_XCODE_DEV_DIR}"
          sudo xcode-select -switch "${DESIRED_XCODE_DEV_DIR}"
          ADDITIONAL_CONFIGURE_ARGS="-DSKIP_VCPKG_BUILD=true"
        fi
        echo "cmake ${ADDITIONAL_CONFIGURE_ARGS} -DVCPKG_BUILD_TYPE=release -DWZ_DISTRIBUTOR:STRING=\"${WZ_DISTRIBUTOR}\" -DADDITIONAL_CMAKE_ARGUMENTS=\"-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY=;-DCODE_SIGN_INJECT_BASE_ENTITLEMENTS=NO\" -P ../configure_mac.cmake"
        cmake ${ADDITIONAL_CONFIGURE_ARGS} -DVCPKG_BUILD_TYPE=release -DWZ_DISTRIBUTOR:STRING="${WZ_DISTRIBUTOR}" -DADDITIONAL_CMAKE_ARGUMENTS="-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY=;-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_INJECT_BASE_ENTITLEMENTS=NO" -P ../src/configure_mac.cmake
        result=${?}
        if [ $result -ne 0 ]; then
        	echo "ERROR: configure_mac.cmake failed"
        	exit ${result}
        fi
        cd - > /dev/null
      failOnStderr: false
  - task: Xcode@5
    displayName: Build Xcode project
    inputs:
      actions: 'build'
      configuration: 'Release'
      sdk: 'macosx'
      xcWorkspacePath: '$(Pipeline.Workspace)/build/warzone2100.xcodeproj'
      scheme: 'package'
      packageApp: false
  - task: CmdLine@2
    displayName: Output build info
    inputs:
      script: |
        cd "${AGENT_BUILDDIRECTORY}"
        echo "BUILD_ARTIFACTSTAGINGDIRECTORY=${BUILD_ARTIFACTSTAGINGDIRECTORY}"
        OUTPUT_DIR="${BUILD_ARTIFACTSTAGINGDIRECTORY}"

        cat "build/src/autorevision.h"

        # Verify "warzone2100.zip" was created
        BUILT_WARZONE_ZIP="build/warzone2100.zip"
        if [ ! -f "${BUILT_WARZONE_ZIP}" ]; then
          echo "ERROR: Something went wrong, and \"${BUILT_WARZONE_ZIP}\" does not exist"
          exit 1
        fi
        # Extract & verify the .zip contents
        TMP_PKG_EXTRACT_DIR="build/tmp/_wzextract"
        rm -rf "${TMP_PKG_EXTRACT_DIR}"
        if [ ! -d "${TMP_PKG_EXTRACT_DIR}" ]; then
          mkdir -p "${TMP_PKG_EXTRACT_DIR}"
        fi
        unzip -qq "${BUILT_WARZONE_ZIP}" -d "${TMP_PKG_EXTRACT_DIR}"
        cd "${TMP_PKG_EXTRACT_DIR}"
        if [ ! -d "Warzone 2100.app" ]; then
          echo "ERROR: \"Warzone 2100.app\" was not extracted from \"${BUILT_WARZONE_ZIP}\""
          exit 1
        fi
        # For debugging purposes, output some information about the generated "Warzone 2100.app" (inside the .zip)
        echo "Generated \"Warzone 2100.app\""
        generated_infoplist_location="Warzone 2100.app/Contents/Info.plist"
        generated_versionnumber=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "${generated_infoplist_location}")
        echo "  -> Version Number (CFBundleShortVersionString): ${generated_versionnumber}"
        generated_buildnumber=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "${generated_infoplist_location}")
        echo "  -> Build Number (CFBundleVersion): ${generated_buildnumber}"
        generated_minimumsystemversion=$(/usr/libexec/PlistBuddy -c "Print LSMinimumSystemVersion" "${generated_infoplist_location}")
        echo "  -> Minimum macOS (LSMinimumSystemVersion): ${generated_minimumsystemversion}"
        codesign_verify_result=$(codesign --verify --deep --strict --verbose=2 "Warzone 2100.app" 2>&1)
        echo "  -> codesign --verify --deep --strict --verbose=2 \"Warzone 2100.app\""
        if [ -n "${codesign_verify_result}" ]; then
          while read -r line; do
            echo "     $line"
          done <<< "$codesign_verify_result"
        else
          echo "     (No output?)"
        fi
        cd - > /dev/null

        # Move warzone2100.zip to the output directory, renaming it
        DESIRED_ZIP_NAME="warzone2100_macOS.zip"
        mv "$BUILT_WARZONE_ZIP" "${OUTPUT_DIR}/${DESIRED_ZIP_NAME}"
        result=${?}
        if [ $result -ne 0 ]; then
          echo "ERROR: Failed to move zip file"
          exit ${result}
        fi
        echo "Generated warzone2100.zip: \"${OUTPUT_DIR}/${DESIRED_ZIP_NAME}\""
        ZIP_HASH="$(shasum -a 512 "${OUTPUT_DIR}/${DESIRED_ZIP_NAME}")"
        ZIP_SIZE="$(stat -f '%z' "${OUTPUT_DIR}/${DESIRED_ZIP_NAME}")"
        echo "  -> SHA512: ${ZIP_HASH}"
        echo "  -> Size (bytes): ${ZIP_SIZE}"
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), eq('${{ parameters.publishArtifact }}', true))
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: ${{ parameters.artifact }}
  - task: GithubRelease@1
    displayName: 'Upload to GitHub Release'
    condition: and(eq('${{ parameters.uploadArtifactToGitHubReleases }}', true), ne('${{ parameters.gitHubConnection }}', ''), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    inputs:
      gitHubConnection: ${{ parameters.gitHubConnection }}
      action: edit
      tagSource: userSpecifiedTag
      # We can't use Build.SourceBranchName because:
      # - "Build.SourceBranchName does not include full name, if name includes forward slash"
      # - Link: https://github.com/microsoft/azure-pipelines-agent/issues/838
      tag: $(FULL_SOURCE_BRANCH_NAME)
      assets: |
        $(Build.ArtifactStagingDirectory)/*.zip
      assetUploadMode: 'replace'
      isDraft: true
      addChangeLog: false
